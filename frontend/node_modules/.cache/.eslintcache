[{"/home/samuel/Documents/chatApp/frontend/src/index.js":"1","/home/samuel/Documents/chatApp/frontend/src/App.js":"2","/home/samuel/Documents/chatApp/frontend/src/pages/Chat.jsx":"3","/home/samuel/Documents/chatApp/frontend/src/pages/Signup.jsx":"4","/home/samuel/Documents/chatApp/frontend/src/pages/Login.jsx":"5","/home/samuel/Documents/chatApp/frontend/src/utils/Api.js":"6","/home/samuel/Documents/chatApp/frontend/src/components/Message.jsx":"7","/home/samuel/Documents/chatApp/frontend/src/pages/Profil.jsx":"8","/home/samuel/Documents/chatApp/frontend/src/components/Users.jsx":"9","/home/samuel/Documents/chatApp/frontend/src/components/Deconnect.jsx":"10"},{"size":257,"mtime":1667760712900,"results":"11","hashOfConfig":"12"},{"size":573,"mtime":1668714309950,"results":"13","hashOfConfig":"12"},{"size":10436,"mtime":1668953289785,"results":"14","hashOfConfig":"12"},{"size":6214,"mtime":1668964434427,"results":"15","hashOfConfig":"12"},{"size":5773,"mtime":1668964325725,"results":"16","hashOfConfig":"12"},{"size":257,"mtime":1668592415927,"results":"17","hashOfConfig":"12"},{"size":1546,"mtime":1668840137818,"results":"18","hashOfConfig":"12"},{"size":1464,"mtime":1668774119322,"results":"19","hashOfConfig":"12"},{"size":1007,"mtime":1668712790242,"results":"20","hashOfConfig":"12"},{"size":526,"mtime":1668710684766,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"1ntr54b",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/samuel/Documents/chatApp/frontend/src/index.js",[],[],[],"/home/samuel/Documents/chatApp/frontend/src/App.js",[],[],"/home/samuel/Documents/chatApp/frontend/src/pages/Chat.jsx",["56","57","58"],[],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport { messageget, usersRouter } from \"../utils/Api\";\nimport Message from \"../components/Message\";\nimport Users from \"../components/Users\";\nimport { useNavigate } from \"react-router-dom\";\nimport Deconnect from \"../components/Deconnect\";\n\nconst Chat = () => {\n  const navigate = useNavigate();\n  const [users, setUsers] = useState([]);\n  const [messages, setmessage] = useState();\n  const [currentuser, setCurrentuser] = useState(undefined);\n  const [currentId, setCurrentId] = useState(undefined);\n  const [toId, settoId] = useState(undefined);\n  const [toUser, settoUser] = useState(\"Welcome\");\n  const [conversation, setConversation] = useState();\n\n  const [input, setInput] = useState(\"\");\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    const { data } = await axios.post(messageget, {\n      message: input,\n      from: currentId,\n      to: toId,\n      toname: toUser,\n    });\n    if (data.status === false) {\n      console.log(\"une erreur c'est produite au niveau des data\");\n    } else {\n      setInput(\"\");\n    }\n  };\n  const handleChange = (event) => {\n    setInput(event.target.value);\n  };\n\n  const changeChat = (id, name) => {\n    settoId(id);\n    settoUser(name);\n  };\n\n  useEffect(() => {\n    const confUser = async () => {\n      if (!localStorage.getItem(\"user\")) {\n        navigate(\"/login\");\n      } else {\n        setCurrentuser(await JSON.parse(localStorage.getItem(\"user\")));\n        setCurrentId(await JSON.parse(localStorage.getItem(\"userId\")));\n      }\n    };\n    confUser();\n  }, []);\n  useEffect(() => {\n    const token = JSON.parse(localStorage.getItem(\"token\"));\n    axios(usersRouter, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n      },\n    })\n      .then(function (response) {\n        // handle success\n        setUsers(response.data.allUsers);\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n\n    axios(messageget, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n      },\n    })\n      .then(function (response) {\n        // handle success\n        setmessage(response.data);\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n  }, []);\n  const myMessages = messages?.message.filter((elm) => {\n    if (\n      (elm.to === toId && elm.from === currentId) ||\n      (elm.to === currentId && elm.from === toId)\n    ) {\n      return true;\n    } else return false;\n  });\n\n  if (!(users || messages)) {\n    return (\n      <div class=\"fixed top-0 right-0 h-screen w-screen z-50 flex justify-center items-center\">\n        <div class=\"animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-gray-900\"></div>\n      </div>\n    );\n  } else {\n    return (\n      <Container>\n        <div class=\"flex h-screen antialiased text-gray-800\">\n          <div class=\"flex flex-row h-full w-full overflow-x-hidden\">\n            <div class=\"flex flex-col py-8 pl-6 pr-2 w-64 text-black bg-[#e6e4e2] flex-shrink-0\">\n              <div class=\"flex flex-row items-center  h-12 w-full my-3\">\n                <div class=\" font-bold text-2xl\">\n                  <div className=\"brand flex\">\n                    <img src=\"lo.png\" alt=\"\" width={40} />\n                    <h1 class=\"\">\n                      GOCHAT<sup class=\"text-[15px] \">42</sup>\n                    </h1>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"overflow-hidden relative w-10 h-10  rounded-full  dark:bg-gray-600\">\n                <svg\n                  class=\"absolute -left-1 w-12 h-12 text-black\"\n                  fill=\"currentColor\"\n                  viewBox=\"0 0 20 20\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    fill-rule=\"evenodd\"\n                    d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\"\n                    clip-rule=\"evenodd\"\n                  ></path>\n                </svg>\n              </div>\n              <div class=\"text-sm font-semibold mt-2 text-black\">\n                <a href=\"/profil\">{currentuser}</a>\n              </div>\n              <div class=\"text-xs text-gray-500 text-gray\">Developper</div>\n\n              <div class=\"flex flex-col mt-8\">\n                <div class=\"flex flex-row items-center justify-between text-xs\">\n                  <span class=\"font-bold\">\n                    <button class=\"bg-black hover:bg-white hover:text-black hover:border hover:border-black text-white font-bold py-2 px-2 rounded\">\n                      Conversations\n                    </button>{\" \"}\n                    <button class=\"bg-black hover:bg-white hover:text-black hover:border hover:border-black text-white font-bold py-2 px-4 mx-3 rounded\">\n                      All users\n                    </button>\n                  </span>\n                </div>\n                <Users\n                  users={users}\n                  changeChat={changeChat}\n                  settoId={settoId}\n                />\n              </div>\n              <Deconnect />\n            </div>\n            <div class=\"flex flex-col flex-auto h-full p-6 \">\n              <div class=\"flex flex-col flex-auto flex-shrink-0   bg-[#e6e4e2] rounded-xl h-full  \">\n                <button class=\"flex flex-row items-center   p-2\">\n                  <div class=\"overflow-hidden relative w-10 h-10  rounded-full  dark:bg-gray-600\">\n                    <svg\n                      class=\"absolute -left-1 w-12 h-12 text-black\"\n                      fill=\"currentColor\"\n                      viewBox=\"0 0 20 20\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        fill-rule=\"evenodd\"\n                        d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\"\n                        clip-rule=\"evenodd\"\n                      ></path>\n                    </svg>\n                  </div>\n                  <div class=\"font-medium text-black px-3 \">\n                    <div>{toUser}</div>\n                    <div class=\"text-sm text-gray-500   \">GoChat</div>\n                  </div>\n                </button>\n                <div\n                  id=\"contact\"\n                  class=\"flex flex-col h-full px-14 overflow-x-auto mb-4\"\n                >\n                  <Message\n                    messages={myMessages}\n                    toId={toId}\n                    currentId={currentId}\n                    toUser={toUser}\n                  />\n                </div>\n                <div class=\"flex flex-row items-center h-16  bg-black w-full px-4\">\n                  <div>\n                    <button class=\"flex items-center justify-center text-gray-400 hover:text-gray-600\">\n                      <svg\n                        class=\"w-5 h-5\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                      >\n                        <path\n                          stroke-linecap=\"round\"\n                          stroke-linejoin=\"round\"\n                          stroke-width=\"2\"\n                          d=\"M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13\"\n                        ></path>\n                      </svg>\n                    </button>\n                  </div>\n                  <div class=\"flex-grow ml-4\">\n                    <div class=\"relative w-full\">\n                      <input\n                        name=\"message\"\n                        type=\"text\"\n                        value={input}\n                        class=\"flex w-full border rounded-xl focus:outline-none focus:border-indigo-300 pl-4 h-10\"\n                        onChange={(e) => handleChange(e)}\n                      />\n                      <button class=\"absolute flex items-center justify-center h-full w-12 right-0 top-0 text-gray-400 hover:text-gray-600\">\n                        <svg\n                          class=\"w-6 h-6\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <path\n                            stroke-linecap=\"round\"\n                            stroke-linejoin=\"round\"\n                            stroke-width=\"2\"\n                            d=\"M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                          ></path>\n                        </svg>\n                      </button>\n                    </div>\n                  </div>\n                  <div class=\"ml-4\">\n                    <button\n                      type=\"submit\"\n                      onClick={(event) => handleSubmit(event)}\n                      class=\"flex items-center justify-center bg-black hover:border hover:bg-white  rounded-xl text-white px-4 py-1 flex-shrink-0\"\n                    >\n                      <span class=\"ml-2\">\n                        <svg\n                          class=\"w-8 h-8 transform rotate-45 -mt-px hover:text-black\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <path\n                            stroke-linecap=\"round\"\n                            stroke-linejoin=\"round\"\n                            stroke-width=\"2\"\n                            d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\"\n                          ></path>\n                        </svg>\n                      </span>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Container>\n    );\n  }\n};\nconst Container = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background-color: black;\n  #contact {\n    margin-right: 5px;\n    &::-webkit-scrollbar {\n      width: 0.2rem;\n      &-thumb {\n        background-color: black;\n      }\n    }\n  }\n`;\n\nexport default Chat;\n",[],"/home/samuel/Documents/chatApp/frontend/src/pages/Signup.jsx",[],[],"/home/samuel/Documents/chatApp/frontend/src/pages/Login.jsx",[],[],"/home/samuel/Documents/chatApp/frontend/src/utils/Api.js",[],[],"/home/samuel/Documents/chatApp/frontend/src/components/Message.jsx",["59"],[],"/home/samuel/Documents/chatApp/frontend/src/pages/Profil.jsx",[],[],[],"/home/samuel/Documents/chatApp/frontend/src/components/Users.jsx",[],[],"/home/samuel/Documents/chatApp/frontend/src/components/Deconnect.jsx",[],[],{"ruleId":"60","severity":1,"message":"61","line":18,"column":10,"nodeType":"62","messageId":"63","endLine":18,"endColumn":22},{"ruleId":"60","severity":1,"message":"64","line":18,"column":24,"nodeType":"62","messageId":"63","endLine":18,"endColumn":39},{"ruleId":"65","severity":1,"message":"66","line":56,"column":6,"nodeType":"67","endLine":56,"endColumn":8,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":9,"column":37,"nodeType":"71","messageId":"72","endLine":9,"endColumn":39},"no-unused-vars","'conversation' is assigned a value but never used.","Identifier","unusedVar","'setConversation' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["73"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",{"desc":"74","fix":"75"},"Update the dependencies array to be: [navigate]",{"range":"76","text":"77"},[1651,1653],"[navigate]"]