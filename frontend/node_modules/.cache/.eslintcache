[{"/home/samuel/Documents/chatApp/frontend/src/index.js":"1","/home/samuel/Documents/chatApp/frontend/src/App.js":"2","/home/samuel/Documents/chatApp/frontend/src/pages/Chat.jsx":"3","/home/samuel/Documents/chatApp/frontend/src/pages/Signup.jsx":"4","/home/samuel/Documents/chatApp/frontend/src/pages/Login.jsx":"5","/home/samuel/Documents/chatApp/frontend/src/utils/Api.js":"6","/home/samuel/Documents/chatApp/frontend/src/components/Message.jsx":"7","/home/samuel/Documents/chatApp/frontend/src/pages/Profil.jsx":"8","/home/samuel/Documents/chatApp/frontend/src/components/Users.jsx":"9","/home/samuel/Documents/chatApp/frontend/src/components/Deconnect.jsx":"10","/home/samuel/Documents/chatApp/frontend/src/components/Welcome.jsx":"11"},{"size":257,"mtime":1667760712900,"results":"12","hashOfConfig":"13"},{"size":573,"mtime":1668714309950,"results":"14","hashOfConfig":"13"},{"size":14691,"mtime":1669371697265,"results":"15","hashOfConfig":"13"},{"size":6781,"mtime":1669205564876,"results":"16","hashOfConfig":"13"},{"size":6181,"mtime":1669205592305,"results":"17","hashOfConfig":"13"},{"size":265,"mtime":1669355406061,"results":"18","hashOfConfig":"13"},{"size":1427,"mtime":1669327436298,"results":"19","hashOfConfig":"13"},{"size":1462,"mtime":1669189635445,"results":"20","hashOfConfig":"13"},{"size":861,"mtime":1669371496033,"results":"21","hashOfConfig":"13"},{"size":530,"mtime":1669189776707,"results":"22","hashOfConfig":"13"},{"size":350,"mtime":1669190351226,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"1ntr54b",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"/home/samuel/Documents/chatApp/frontend/src/index.js",[],[],[],"/home/samuel/Documents/chatApp/frontend/src/App.js",[],[],"/home/samuel/Documents/chatApp/frontend/src/pages/Chat.jsx",["59","60"],[],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport { messageget, usersRouter, host } from \"../utils/Api\";\nimport Message from \"../components/Message\";\nimport Users from \"../components/Users\";\nimport { useNavigate } from \"react-router-dom\";\nimport Deconnect from \"../components/Deconnect\";\nimport Welcome from \"../components/Welcome\";\nimport { io } from \"socket.io-client\";\nimport { useRef } from \"react\";\n\nconst Chat = () => {\n  const socket = useRef();\n  const navigate = useNavigate();\n  const [users, setUsers] = useState([]);\n  const [messages, setmessage] = useState();\n  const [currentuser, setCurrentuser] = useState(undefined);\n  const [currentId, setCurrentId] = useState(\n    JSON.parse(localStorage.getItem(\"userId\"))\n  );\n  const [toId, settoId] = useState(undefined);\n  const [toUser, settoUser] = useState(\"Welcome\");\n  const [input, setInput] = useState(\"\");\n  let converse = [];\n  let array = [];\n\n  //recuperation de l'utilisateur courant\n  //_______________________________________________________________________________________________________\n  useEffect(() => {\n    const confUser = async () => {\n      if (!localStorage.getItem(\"user\")) {\n        navigate(\"/login\");\n      } else {\n        setCurrentuser(await JSON.parse(localStorage.getItem(\"user\")));\n        setCurrentId(await JSON.parse(localStorage.getItem(\"userId\")));\n      }\n    };\n    confUser();\n  }, []);\n  useEffect(() => {\n    if (currentuser) {\n      socket.current = io(host);\n      socket.current.emit(\"add-user\", currentuser._id);\n    }\n  }, [currentuser]);\n  //___________________________________________________________________________________________________________\n\n  //recuperation des Users\n  //_______________________________________________________________________________________________\n  useEffect(() => {\n    const token = JSON.parse(localStorage.getItem(\"token\"));\n    axios(usersRouter, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n      },\n    })\n      .then(function (response) {\n        setUsers(response.data.allUsers);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n    //______________________________________________________________________________________________________\n\n    //recuperations des messages\n    //_______________________________________________________________________________________________________\n    axios(`${messageget}${currentId}`, {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n      },\n    })\n      .then(function (response) {\n        setmessage(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }, [messages]);\n\n  useEffect(() => {\n    if (socket.current) {\n      socket.current.on(\"msg-recieved\", (input) => {\n        setmessage({\n          message: input,\n        });\n      });\n    }\n  }, [messages]);\n  //_______________________________________________________________________________________________\n\n  //filtre des messages\n  //________________________________________________________________________________________________\n  const myMessages = messages?.messages.filter((elm) => {\n    array.push(elm.to, elm.from);\n    converse = [...new Set(array)];\n    if (elm.to === toId || elm.from === toId) {\n      return true;\n    } else return false;\n  });\n\n  //filtre user\n  const myUsers = users?.filter((elm) => {\n    if (converse.includes(elm._id)) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n\n  //__________________________________________________________________________________________________\n\n  //Envoi de message\n  //_________________________________________________________________________________________________________\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    const { data } = await axios.post(messageget, {\n      message: input,\n      from: currentId,\n      to: toId,\n      toname: toUser,\n    });\n    socket.current.emit(\"send-msg\", {\n      message: input,\n      from: currentId,\n      to: toId,\n      toname: toUser,\n    });\n    console.log(\"messages envoyer\");\n\n    if (data.status === false) {\n      console.log(\"une erreur c'est produite au niveau des data\");\n    } else {\n      setInput(\"\");\n    }\n  };\n  const handleChange = (event) => {\n    setInput(event.target.value);\n  };\n  //______________________________________________________________________________________________________\n  //fonction de changement de chat\n\n  const changeChat = (id, name) => {\n    settoId(id);\n    settoUser(name);\n  };\n  if (users === undefined) {\n    return (\n      <div className=\"fixed top-0 right-0 h-screen w-screen z-50 flex-col flex justify-center items-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-gray-900\"></div>\n        <br />\n        Loading...\n        <p className=\"w-1/3 text-center text-[gray]\">\n          This may take a few seconds, please don't close this page.\n        </p>\n      </div>\n    );\n  } else {\n    return (\n      <Container>\n        <div className=\"flex h-screen antialiased text-gray-800\">\n          <div className=\"flex flex-row h-full w-full overflow-x-hidden\">\n            <div className=\"flex flex-col py-8 pl-6 pr-2 w-64 text-black bg-opacity-25 backdrop-filter backdrop-blur-lg flex-shrink-0\">\n              <div className=\"flex flex-row items-center justify-center h-12 w-full \">\n                <div className=\" font-bold text-2xl\">\n                  <div className=\"brand flex items-center \">\n                    <img src=\"lo.png\" alt=\"\" width={40} />\n                    <h1 className=\"\">\n                      GOCHAT<sup className=\"text-[15px] \">42</sup>\n                    </h1>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex flex-col items-center\t\">\n                <div className=\"overflow-hidden  relative w-10 h-10  rounded-full  dark:bg-gray-600\">\n                  <svg\n                    className=\"absolute -left-1 w-12 h-12 text-black\"\n                    fill=\"currentColor\"\n                    viewBox=\"0 0 20 20\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fillRule=\"evenodd\"\n                      d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\"\n                      clipRule=\"evenodd\"\n                    ></path>\n                  </svg>\n                </div>\n                <div className=\"text-sm font-semibold mt-2 text-black\">\n                  <a href=\"/profil\">{currentuser}</a>\n                </div>\n                <div className=\"text-xs text-gray-500 text-gray\">\n                  Developper\n                </div>\n              </div>\n\n              <div className=\"flex flex-col mt-3\">\n                <div className=\"flex flex-row items-center justify-between text-xs\">\n                  <span className=\"font-bold w-[100%]\">\n                    <button className=\"bg-black w-[100%] hover:bg-white hover:text-black hover:border hover:border-black text-white font-bold py-2 px-2 rounded\">\n                      Conversations\n                    </button>{\" \"}\n                  </span>\n                </div>\n\n                <Users\n                  users={myUsers}\n                  changeChat={changeChat}\n                  settoId={settoId}\n                />\n              </div>\n              <Deconnect />\n            </div>\n            <div className=\"flex flex-col flex-auto h-full p-6 \">\n              <div className=\"flex flex-col flex-auto flex-shrink-0   bg-[#e6e4e2] rounded-xl h-full  \">\n                <button className=\"flex flex-row items-center   p-2\">\n                  <div className=\"overflow-hidden relative w-10 h-10 bg-opacity-25 backdrop-filter backdrop-blur-lg  rounded-full  dark:bg-gray-600\">\n                    <svg\n                      className=\"absolute -left-1 w-12 h-12 text-black\"\n                      fill=\"currentColor\"\n                      viewBox=\"0 0 20 20\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        fillRule=\"evenodd\"\n                        d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\"\n                        clipRule=\"evenodd\"\n                      ></path>\n                    </svg>\n                  </div>\n                  <div className=\"font-medium text-black px-3 \">\n                    <div>{toUser}</div>\n                    <div className=\"text-sm text-gray-500   \">GoChat</div>\n                  </div>\n                </button>\n                <div\n                  id=\"contact\"\n                  className=\"flex flex-col h-full px-14 overflow-x-auto mb-4\"\n                >\n                  {toId === undefined ? (\n                    <Welcome />\n                  ) : (\n                    <Message\n                      messages={myMessages}\n                      toId={toId}\n                      currentId={currentId}\n                      toUser={toUser}\n                    />\n                  )}\n                </div>\n                <div className=\"flex flex-row items-center h-16 bg-opacity-25 backdrop-filter backdrop-blur-lg bg-black w-full px-4\">\n                  <div>\n                    <button className=\"flex items-center justify-center text-gray-400 hover:text-gray-600\">\n                      <svg\n                        className=\"w-5 h-5 text-white\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth=\"2\"\n                          d=\"M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13\"\n                        ></path>\n                      </svg>\n                    </button>\n                  </div>\n                  <div className=\"flex-grow ml-4\">\n                    <div className=\"relative w-full\">\n                      <input\n                        name=\"message\"\n                        type=\"text\"\n                        value={input}\n                        className=\"flex w-full border rounded-xl focus:outline-none focus:border-indigo-300 pl-4 h-10\"\n                        onChange={(e) => handleChange(e)}\n                      />\n                      <button className=\"absolute flex items-center justify-center h-full w-12 right-0 top-0 text-gray-400 hover:text-gray-600\">\n                        <svg\n                          className=\"w-6 h-6\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth=\"2\"\n                            d=\"M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n                          ></path>\n                        </svg>\n                      </button>\n                    </div>\n                  </div>\n                  <div className=\"ml-4\">\n                    <button\n                      type=\"submit\"\n                      onClick={(event) => handleSubmit(event)}\n                      className=\"flex items-center justify-center     rounded-xl text-white px-4 py-1 flex-shrink-0\"\n                    >\n                      <span className=\"ml-2\">\n                        <svg\n                          className=\"w-8 h-8 transform rotate-45 -mt-px hover:text-black\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth=\"2\"\n                            d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\"\n                          ></path>\n                        </svg>\n                      </span>\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n            {/* //rightbar */}\n            <div className=\"flex flex-col py-8 pl-6 pr-2 w-64 text-black bg-opacity-25 backdrop-filter backdrop-blur-lg flex-shrink-0\">\n              <div className=\"flex flex-col mt-3\">\n                <div className=\"flex flex-row items-center justify-between text-xs\">\n                  <span className=\"font-bold w-[100%] justify-center\">\n                    <button className=\"bg-black w-[100%] hover:bg-white hover:text-black hover:border hover:border-black text-white font-bold py-2 px-4  rounded\">\n                      All users\n                    </button>\n                  </span>\n                </div>\n\n                <div\n                  id=\"contact\"\n                  className=\"flex flex-col space-y-1 mt-4  h-90 overflow-y-auto \"\n                >\n                  {users &&\n                    users.map((name, index) => {\n                      return (\n                        <button\n                          key={index}\n                          onClick={() => changeChat(name._id, name.username)}\n                          className=\"flex flex-row items-center hover:border-b-2 hover:border-black border-b-[1px] border-[#f5f5f5]  p-2\"\n                        >\n                          <div className=\"flex items-center justify-center h-8 w-8 bg-black rounded-full text-white\">\n                            {name.username[0]?.toUpperCase()}\n                          </div>\n                          <div className=\"ml-2 text-sm font-semibold\">\n                            {name.username}\n                          </div>\n                        </button>\n                      );\n                    })}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Container>\n    );\n  }\n};\nconst Container = styled.div`\n  height: 100vh;\n  width: 100vw;\n\n  #contact {\n    margin-right: 5px;\n    &::-webkit-scrollbar {\n      width: 0.2rem;\n      &-thumb {\n        background-color: black;\n      }\n    }\n  }\n`;\n\nexport default Chat;\n","/home/samuel/Documents/chatApp/frontend/src/pages/Signup.jsx",[],[],"/home/samuel/Documents/chatApp/frontend/src/pages/Login.jsx",[],[],"/home/samuel/Documents/chatApp/frontend/src/utils/Api.js",[],[],"/home/samuel/Documents/chatApp/frontend/src/components/Message.jsx",["61"],[],"/home/samuel/Documents/chatApp/frontend/src/pages/Profil.jsx",[],[],"/home/samuel/Documents/chatApp/frontend/src/components/Users.jsx",[],[],"/home/samuel/Documents/chatApp/frontend/src/components/Deconnect.jsx",[],[],"/home/samuel/Documents/chatApp/frontend/src/components/Welcome.jsx",[],[],{"ruleId":"62","severity":1,"message":"63","line":40,"column":6,"nodeType":"64","endLine":40,"endColumn":8,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"66","line":81,"column":6,"nodeType":"64","endLine":81,"endColumn":16,"suggestions":"67"},{"ruleId":"68","severity":1,"message":"69","line":9,"column":37,"nodeType":"70","messageId":"71","endLine":9,"endColumn":39},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["72"],"React Hook useEffect has a missing dependency: 'currentId'. Either include it or remove the dependency array.",["73"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},"Update the dependencies array to be: [navigate]",{"range":"78","text":"79"},"Update the dependencies array to be: [currentId, messages]",{"range":"80","text":"81"},[1460,1462],"[navigate]",[2764,2774],"[currentId, messages]"]