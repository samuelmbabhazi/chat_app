{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = exports.BaseServer = void 0;\nconst qs = require(\"querystring\");\nconst url_1 = require(\"url\");\nconst base64id = require(\"base64id\");\nconst transports_1 = require(\"./transports\");\nconst events_1 = require(\"events\");\nconst socket_1 = require(\"./socket\");\nconst debug_1 = require(\"debug\");\nconst cookie_1 = require(\"cookie\");\nconst ws_1 = require(\"ws\");\nconst debug = (0, debug_1.default)(\"engine\");\nclass BaseServer extends events_1.EventEmitter {\n  /**\n   * Server constructor.\n   *\n   * @param {Object} opts - options\n   * @api public\n   */\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.clients = {};\n    this.clientsCount = 0;\n    this.opts = Object.assign({\n      wsEngine: ws_1.Server,\n      pingTimeout: 20000,\n      pingInterval: 25000,\n      upgradeTimeout: 10000,\n      maxHttpBufferSize: 1e6,\n      transports: Object.keys(transports_1.default),\n      allowUpgrades: true,\n      httpCompression: {\n        threshold: 1024\n      },\n      cors: false,\n      allowEIO3: false\n    }, opts);\n    if (opts.cookie) {\n      this.opts.cookie = Object.assign({\n        name: \"io\",\n        path: \"/\",\n        // @ts-ignore\n        httpOnly: opts.cookie.path !== false,\n        sameSite: \"lax\"\n      }, opts.cookie);\n    }\n    if (this.opts.cors) {\n      this.corsMiddleware = require(\"cors\")(this.opts.cors);\n    }\n    if (opts.perMessageDeflate) {\n      this.opts.perMessageDeflate = Object.assign({\n        threshold: 1024\n      }, opts.perMessageDeflate);\n    }\n    this.init();\n  }\n  /**\n   * Returns a list of available transports for upgrade given a certain transport.\n   *\n   * @return {Array}\n   * @api public\n   */\n  upgrades(transport) {\n    if (!this.opts.allowUpgrades) return [];\n    return transports_1.default[transport].upgradesTo || [];\n  }\n  /**\n   * Verifies a request.\n   *\n   * @param {http.IncomingMessage}\n   * @return {Boolean} whether the request is valid\n   * @api private\n   */\n  verify(req, upgrade, fn) {\n    // transport check\n    const transport = req._query.transport;\n    if (!~this.opts.transports.indexOf(transport)) {\n      debug('unknown transport \"%s\"', transport);\n      return fn(Server.errors.UNKNOWN_TRANSPORT, {\n        transport\n      });\n    }\n    // 'Origin' header check\n    const isOriginInvalid = checkInvalidHeaderChar(req.headers.origin);\n    if (isOriginInvalid) {\n      const origin = req.headers.origin;\n      req.headers.origin = null;\n      debug(\"origin header invalid\");\n      return fn(Server.errors.BAD_REQUEST, {\n        name: \"INVALID_ORIGIN\",\n        origin\n      });\n    }\n    // sid check\n    const sid = req._query.sid;\n    if (sid) {\n      if (!this.clients.hasOwnProperty(sid)) {\n        debug('unknown sid \"%s\"', sid);\n        return fn(Server.errors.UNKNOWN_SID, {\n          sid\n        });\n      }\n      const previousTransport = this.clients[sid].transport.name;\n      if (!upgrade && previousTransport !== transport) {\n        debug(\"bad request: unexpected transport without upgrade\");\n        return fn(Server.errors.BAD_REQUEST, {\n          name: \"TRANSPORT_MISMATCH\",\n          transport,\n          previousTransport\n        });\n      }\n    } else {\n      // handshake is GET only\n      if (\"GET\" !== req.method) {\n        return fn(Server.errors.BAD_HANDSHAKE_METHOD, {\n          method: req.method\n        });\n      }\n      if (transport === \"websocket\" && !upgrade) {\n        debug(\"invalid transport upgrade\");\n        return fn(Server.errors.BAD_REQUEST, {\n          name: \"TRANSPORT_HANDSHAKE_ERROR\"\n        });\n      }\n      if (!this.opts.allowRequest) return fn();\n      return this.opts.allowRequest(req, (message, success) => {\n        if (!success) {\n          return fn(Server.errors.FORBIDDEN, {\n            message\n          });\n        }\n        fn();\n      });\n    }\n    fn();\n  }\n  /**\n   * Closes all clients.\n   *\n   * @api public\n   */\n  close() {\n    debug(\"closing all open clients\");\n    for (let i in this.clients) {\n      if (this.clients.hasOwnProperty(i)) {\n        this.clients[i].close(true);\n      }\n    }\n    this.cleanup();\n    return this;\n  }\n  /**\n   * generate a socket id.\n   * Overwrite this method to generate your custom socket id\n   *\n   * @param {Object} request object\n   * @api public\n   */\n  generateId(req) {\n    return base64id.generateId();\n  }\n  /**\n   * Handshakes a new client.\n   *\n   * @param {String} transport name\n   * @param {Object} request object\n   * @param {Function} closeConnection\n   *\n   * @api protected\n   */\n  async handshake(transportName, req, closeConnection) {\n    const protocol = req._query.EIO === \"4\" ? 4 : 3; // 3rd revision by default\n    if (protocol === 3 && !this.opts.allowEIO3) {\n      debug(\"unsupported protocol version\");\n      this.emit(\"connection_error\", {\n        req,\n        code: Server.errors.UNSUPPORTED_PROTOCOL_VERSION,\n        message: Server.errorMessages[Server.errors.UNSUPPORTED_PROTOCOL_VERSION],\n        context: {\n          protocol\n        }\n      });\n      closeConnection(Server.errors.UNSUPPORTED_PROTOCOL_VERSION);\n      return;\n    }\n    let id;\n    try {\n      id = await this.generateId(req);\n    } catch (e) {\n      debug(\"error while generating an id\");\n      this.emit(\"connection_error\", {\n        req,\n        code: Server.errors.BAD_REQUEST,\n        message: Server.errorMessages[Server.errors.BAD_REQUEST],\n        context: {\n          name: \"ID_GENERATION_ERROR\",\n          error: e\n        }\n      });\n      closeConnection(Server.errors.BAD_REQUEST);\n      return;\n    }\n    debug('handshaking client \"%s\"', id);\n    try {\n      var transport = this.createTransport(transportName, req);\n      if (\"polling\" === transportName) {\n        transport.maxHttpBufferSize = this.opts.maxHttpBufferSize;\n        transport.httpCompression = this.opts.httpCompression;\n      } else if (\"websocket\" === transportName) {\n        transport.perMessageDeflate = this.opts.perMessageDeflate;\n      }\n      if (req._query && req._query.b64) {\n        transport.supportsBinary = false;\n      } else {\n        transport.supportsBinary = true;\n      }\n    } catch (e) {\n      debug('error handshaking to transport \"%s\"', transportName);\n      this.emit(\"connection_error\", {\n        req,\n        code: Server.errors.BAD_REQUEST,\n        message: Server.errorMessages[Server.errors.BAD_REQUEST],\n        context: {\n          name: \"TRANSPORT_HANDSHAKE_ERROR\",\n          error: e\n        }\n      });\n      closeConnection(Server.errors.BAD_REQUEST);\n      return;\n    }\n    const socket = new socket_1.Socket(id, this, transport, req, protocol);\n    transport.on(\"headers\", (headers, req) => {\n      const isInitialRequest = !req._query.sid;\n      if (isInitialRequest) {\n        if (this.opts.cookie) {\n          headers[\"Set-Cookie\"] = [\n          // @ts-ignore\n          (0, cookie_1.serialize)(this.opts.cookie.name, id, this.opts.cookie)];\n        }\n        this.emit(\"initial_headers\", headers, req);\n      }\n      this.emit(\"headers\", headers, req);\n    });\n    transport.onRequest(req);\n    this.clients[id] = socket;\n    this.clientsCount++;\n    socket.once(\"close\", () => {\n      delete this.clients[id];\n      this.clientsCount--;\n    });\n    this.emit(\"connection\", socket);\n    return transport;\n  }\n}\nexports.BaseServer = BaseServer;\n/**\n * Protocol errors mappings.\n */\nBaseServer.errors = {\n  UNKNOWN_TRANSPORT: 0,\n  UNKNOWN_SID: 1,\n  BAD_HANDSHAKE_METHOD: 2,\n  BAD_REQUEST: 3,\n  FORBIDDEN: 4,\n  UNSUPPORTED_PROTOCOL_VERSION: 5\n};\nBaseServer.errorMessages = {\n  0: \"Transport unknown\",\n  1: \"Session ID unknown\",\n  2: \"Bad handshake method\",\n  3: \"Bad request\",\n  4: \"Forbidden\",\n  5: \"Unsupported protocol version\"\n};\nclass Server extends BaseServer {\n  /**\n   * Initialize websocket server\n   *\n   * @api protected\n   */\n  init() {\n    if (!~this.opts.transports.indexOf(\"websocket\")) return;\n    if (this.ws) this.ws.close();\n    this.ws = new this.opts.wsEngine({\n      noServer: true,\n      clientTracking: false,\n      perMessageDeflate: this.opts.perMessageDeflate,\n      maxPayload: this.opts.maxHttpBufferSize\n    });\n    if (typeof this.ws.on === \"function\") {\n      this.ws.on(\"headers\", (headersArray, req) => {\n        // note: 'ws' uses an array of headers, while Engine.IO uses an object (response.writeHead() accepts both formats)\n        // we could also try to parse the array and then sync the values, but that will be error-prone\n        const additionalHeaders = {};\n        const isInitialRequest = !req._query.sid;\n        if (isInitialRequest) {\n          this.emit(\"initial_headers\", additionalHeaders, req);\n        }\n        this.emit(\"headers\", additionalHeaders, req);\n        Object.keys(additionalHeaders).forEach(key => {\n          headersArray.push(`${key}: ${additionalHeaders[key]}`);\n        });\n      });\n    }\n  }\n  cleanup() {\n    if (this.ws) {\n      debug(\"closing webSocketServer\");\n      this.ws.close();\n      // don't delete this.ws because it can be used again if the http server starts listening again\n    }\n  }\n  /**\n   * Prepares a request by processing the query string.\n   *\n   * @api private\n   */\n  prepare(req) {\n    // try to leverage pre-existing `req._query` (e.g: from connect)\n    if (!req._query) {\n      req._query = ~req.url.indexOf(\"?\") ? qs.parse((0, url_1.parse)(req.url).query) : {};\n    }\n  }\n  createTransport(transportName, req) {\n    return new transports_1.default[transportName](req);\n  }\n  /**\n   * Handles an Engine.IO HTTP request.\n   *\n   * @param {http.IncomingMessage} request\n   * @param {http.ServerResponse|http.OutgoingMessage} response\n   * @api public\n   */\n  handleRequest(req, res) {\n    debug('handling \"%s\" http request \"%s\"', req.method, req.url);\n    this.prepare(req);\n    req.res = res;\n    const callback = (errorCode, errorContext) => {\n      if (errorCode !== undefined) {\n        this.emit(\"connection_error\", {\n          req,\n          code: errorCode,\n          message: Server.errorMessages[errorCode],\n          context: errorContext\n        });\n        abortRequest(res, errorCode, errorContext);\n        return;\n      }\n      if (req._query.sid) {\n        debug(\"setting new request for existing client\");\n        this.clients[req._query.sid].transport.onRequest(req);\n      } else {\n        const closeConnection = (errorCode, errorContext) => abortRequest(res, errorCode, errorContext);\n        this.handshake(req._query.transport, req, closeConnection);\n      }\n    };\n    if (this.corsMiddleware) {\n      this.corsMiddleware.call(null, req, res, () => {\n        this.verify(req, false, callback);\n      });\n    } else {\n      this.verify(req, false, callback);\n    }\n  }\n  /**\n   * Handles an Engine.IO HTTP Upgrade.\n   *\n   * @api public\n   */\n  handleUpgrade(req, socket, upgradeHead) {\n    this.prepare(req);\n    this.verify(req, true, (errorCode, errorContext) => {\n      if (errorCode) {\n        this.emit(\"connection_error\", {\n          req,\n          code: errorCode,\n          message: Server.errorMessages[errorCode],\n          context: errorContext\n        });\n        abortUpgrade(socket, errorCode, errorContext);\n        return;\n      }\n      const head = Buffer.from(upgradeHead); // eslint-disable-line node/no-deprecated-api\n      upgradeHead = null;\n      // delegate to ws\n      this.ws.handleUpgrade(req, socket, head, websocket => {\n        this.onWebSocket(req, socket, websocket);\n      });\n    });\n  }\n  /**\n   * Called upon a ws.io connection.\n   *\n   * @param {ws.Socket} websocket\n   * @api private\n   */\n  onWebSocket(req, socket, websocket) {\n    websocket.on(\"error\", onUpgradeError);\n    if (transports_1.default[req._query.transport] !== undefined && !transports_1.default[req._query.transport].prototype.handlesUpgrades) {\n      debug(\"transport doesnt handle upgraded requests\");\n      websocket.close();\n      return;\n    }\n    // get client id\n    const id = req._query.sid;\n    // keep a reference to the ws.Socket\n    req.websocket = websocket;\n    if (id) {\n      const client = this.clients[id];\n      if (!client) {\n        debug(\"upgrade attempt for closed client\");\n        websocket.close();\n      } else if (client.upgrading) {\n        debug(\"transport has already been trying to upgrade\");\n        websocket.close();\n      } else if (client.upgraded) {\n        debug(\"transport had already been upgraded\");\n        websocket.close();\n      } else {\n        debug(\"upgrading existing transport\");\n        // transport error handling takes over\n        websocket.removeListener(\"error\", onUpgradeError);\n        const transport = this.createTransport(req._query.transport, req);\n        if (req._query && req._query.b64) {\n          transport.supportsBinary = false;\n        } else {\n          transport.supportsBinary = true;\n        }\n        transport.perMessageDeflate = this.opts.perMessageDeflate;\n        client.maybeUpgrade(transport);\n      }\n    } else {\n      const closeConnection = (errorCode, errorContext) => abortUpgrade(socket, errorCode, errorContext);\n      this.handshake(req._query.transport, req, closeConnection);\n    }\n    function onUpgradeError() {\n      debug(\"websocket error before upgrade\");\n      // websocket.close() not needed\n    }\n  }\n  /**\n   * Captures upgrade requests for a http.Server.\n   *\n   * @param {http.Server} server\n   * @param {Object} options\n   * @api public\n   */\n  attach(server) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let path = (options.path || \"/engine.io\").replace(/\\/$/, \"\");\n    const destroyUpgradeTimeout = options.destroyUpgradeTimeout || 1000;\n    // normalize path\n    path += \"/\";\n    function check(req) {\n      return path === req.url.substr(0, path.length);\n    }\n    // cache and clean up listeners\n    const listeners = server.listeners(\"request\").slice(0);\n    server.removeAllListeners(\"request\");\n    server.on(\"close\", this.close.bind(this));\n    server.on(\"listening\", this.init.bind(this));\n    // add request handler\n    server.on(\"request\", (req, res) => {\n      if (check(req)) {\n        debug('intercepting request for path \"%s\"', path);\n        this.handleRequest(req, res);\n      } else {\n        let i = 0;\n        const l = listeners.length;\n        for (; i < l; i++) {\n          listeners[i].call(server, req, res);\n        }\n      }\n    });\n    if (~this.opts.transports.indexOf(\"websocket\")) {\n      server.on(\"upgrade\", (req, socket, head) => {\n        if (check(req)) {\n          this.handleUpgrade(req, socket, head);\n        } else if (false !== options.destroyUpgrade) {\n          // default node behavior is to disconnect when no handlers\n          // but by adding a handler, we prevent that\n          // and if no eio thing handles the upgrade\n          // then the socket needs to die!\n          setTimeout(function () {\n            // @ts-ignore\n            if (socket.writable && socket.bytesWritten <= 0) {\n              return socket.end();\n            }\n          }, destroyUpgradeTimeout);\n        }\n      });\n    }\n  }\n}\nexports.Server = Server;\n/**\n * Close the HTTP long-polling request\n *\n * @param res - the response object\n * @param errorCode - the error code\n * @param errorContext - additional error context\n *\n * @api private\n */\nfunction abortRequest(res, errorCode, errorContext) {\n  const statusCode = errorCode === Server.errors.FORBIDDEN ? 403 : 400;\n  const message = errorContext && errorContext.message ? errorContext.message : Server.errorMessages[errorCode];\n  res.writeHead(statusCode, {\n    \"Content-Type\": \"application/json\"\n  });\n  res.end(JSON.stringify({\n    code: errorCode,\n    message\n  }));\n}\n/**\n * Close the WebSocket connection\n *\n * @param {net.Socket} socket\n * @param {string} errorCode - the error code\n * @param {object} errorContext - additional error context\n *\n * @api private\n */\nfunction abortUpgrade(socket, errorCode) {\n  let errorContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  socket.on(\"error\", () => {\n    debug(\"ignoring error from closed connection\");\n  });\n  if (socket.writable) {\n    const message = errorContext.message || Server.errorMessages[errorCode];\n    const length = Buffer.byteLength(message);\n    socket.write(\"HTTP/1.1 400 Bad Request\\r\\n\" + \"Connection: close\\r\\n\" + \"Content-type: text/html\\r\\n\" + \"Content-Length: \" + length + \"\\r\\n\" + \"\\r\\n\" + message);\n  }\n  socket.destroy();\n}\n/* eslint-disable */\n/**\n * From https://github.com/nodejs/node/blob/v8.4.0/lib/_http_common.js#L303-L354\n *\n * True if val contains an invalid field-vchar\n *  field-value    = *( field-content / obs-fold )\n *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n *  field-vchar    = VCHAR / obs-text\n *\n * checkInvalidHeaderChar() is currently designed to be inlinable by v8,\n * so take care when making changes to the implementation so that the source\n * code size does not exceed v8's default max_inlined_source_size setting.\n **/\n// prettier-ignore\nconst validHdrChars = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 // ... 255\n];\n\nfunction checkInvalidHeaderChar(val) {\n  val += \"\";\n  if (val.length < 1) return false;\n  if (!validHdrChars[val.charCodeAt(0)]) {\n    debug('invalid header, index 0, char \"%s\"', val.charCodeAt(0));\n    return true;\n  }\n  if (val.length < 2) return false;\n  if (!validHdrChars[val.charCodeAt(1)]) {\n    debug('invalid header, index 1, char \"%s\"', val.charCodeAt(1));\n    return true;\n  }\n  if (val.length < 3) return false;\n  if (!validHdrChars[val.charCodeAt(2)]) {\n    debug('invalid header, index 2, char \"%s\"', val.charCodeAt(2));\n    return true;\n  }\n  if (val.length < 4) return false;\n  if (!validHdrChars[val.charCodeAt(3)]) {\n    debug('invalid header, index 3, char \"%s\"', val.charCodeAt(3));\n    return true;\n  }\n  for (let i = 4; i < val.length; ++i) {\n    if (!validHdrChars[val.charCodeAt(i)]) {\n      debug('invalid header, index \"%i\", char \"%s\"', i, val.charCodeAt(i));\n      return true;\n    }\n  }\n  return false;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","Server","BaseServer","qs","require","url_1","base64id","transports_1","events_1","socket_1","debug_1","cookie_1","ws_1","debug","default","EventEmitter","constructor","opts","clients","clientsCount","assign","wsEngine","pingTimeout","pingInterval","upgradeTimeout","maxHttpBufferSize","transports","keys","allowUpgrades","httpCompression","threshold","cors","allowEIO3","cookie","name","path","httpOnly","sameSite","corsMiddleware","perMessageDeflate","init","upgrades","transport","upgradesTo","verify","req","upgrade","fn","_query","indexOf","errors","UNKNOWN_TRANSPORT","isOriginInvalid","checkInvalidHeaderChar","headers","origin","BAD_REQUEST","sid","hasOwnProperty","UNKNOWN_SID","previousTransport","method","BAD_HANDSHAKE_METHOD","allowRequest","message","success","FORBIDDEN","close","i","cleanup","generateId","handshake","transportName","closeConnection","protocol","EIO","emit","code","UNSUPPORTED_PROTOCOL_VERSION","errorMessages","context","id","e","error","createTransport","b64","supportsBinary","socket","Socket","on","isInitialRequest","serialize","onRequest","once","ws","noServer","clientTracking","maxPayload","headersArray","additionalHeaders","forEach","key","push","prepare","url","parse","query","handleRequest","res","callback","errorCode","errorContext","undefined","abortRequest","call","handleUpgrade","upgradeHead","abortUpgrade","head","Buffer","from","websocket","onWebSocket","onUpgradeError","prototype","handlesUpgrades","client","upgrading","upgraded","removeListener","maybeUpgrade","attach","server","options","replace","destroyUpgradeTimeout","check","substr","length","listeners","slice","removeAllListeners","bind","l","destroyUpgrade","setTimeout","writable","bytesWritten","end","statusCode","writeHead","JSON","stringify","byteLength","write","destroy","validHdrChars","val","charCodeAt"],"sources":["/home/samuel/Documents/chatApp/node_modules/engine.io/build/server.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Server = exports.BaseServer = void 0;\nconst qs = require(\"querystring\");\nconst url_1 = require(\"url\");\nconst base64id = require(\"base64id\");\nconst transports_1 = require(\"./transports\");\nconst events_1 = require(\"events\");\nconst socket_1 = require(\"./socket\");\nconst debug_1 = require(\"debug\");\nconst cookie_1 = require(\"cookie\");\nconst ws_1 = require(\"ws\");\nconst debug = (0, debug_1.default)(\"engine\");\nclass BaseServer extends events_1.EventEmitter {\n    /**\n     * Server constructor.\n     *\n     * @param {Object} opts - options\n     * @api public\n     */\n    constructor(opts = {}) {\n        super();\n        this.clients = {};\n        this.clientsCount = 0;\n        this.opts = Object.assign({\n            wsEngine: ws_1.Server,\n            pingTimeout: 20000,\n            pingInterval: 25000,\n            upgradeTimeout: 10000,\n            maxHttpBufferSize: 1e6,\n            transports: Object.keys(transports_1.default),\n            allowUpgrades: true,\n            httpCompression: {\n                threshold: 1024\n            },\n            cors: false,\n            allowEIO3: false\n        }, opts);\n        if (opts.cookie) {\n            this.opts.cookie = Object.assign({\n                name: \"io\",\n                path: \"/\",\n                // @ts-ignore\n                httpOnly: opts.cookie.path !== false,\n                sameSite: \"lax\"\n            }, opts.cookie);\n        }\n        if (this.opts.cors) {\n            this.corsMiddleware = require(\"cors\")(this.opts.cors);\n        }\n        if (opts.perMessageDeflate) {\n            this.opts.perMessageDeflate = Object.assign({\n                threshold: 1024\n            }, opts.perMessageDeflate);\n        }\n        this.init();\n    }\n    /**\n     * Returns a list of available transports for upgrade given a certain transport.\n     *\n     * @return {Array}\n     * @api public\n     */\n    upgrades(transport) {\n        if (!this.opts.allowUpgrades)\n            return [];\n        return transports_1.default[transport].upgradesTo || [];\n    }\n    /**\n     * Verifies a request.\n     *\n     * @param {http.IncomingMessage}\n     * @return {Boolean} whether the request is valid\n     * @api private\n     */\n    verify(req, upgrade, fn) {\n        // transport check\n        const transport = req._query.transport;\n        if (!~this.opts.transports.indexOf(transport)) {\n            debug('unknown transport \"%s\"', transport);\n            return fn(Server.errors.UNKNOWN_TRANSPORT, { transport });\n        }\n        // 'Origin' header check\n        const isOriginInvalid = checkInvalidHeaderChar(req.headers.origin);\n        if (isOriginInvalid) {\n            const origin = req.headers.origin;\n            req.headers.origin = null;\n            debug(\"origin header invalid\");\n            return fn(Server.errors.BAD_REQUEST, {\n                name: \"INVALID_ORIGIN\",\n                origin\n            });\n        }\n        // sid check\n        const sid = req._query.sid;\n        if (sid) {\n            if (!this.clients.hasOwnProperty(sid)) {\n                debug('unknown sid \"%s\"', sid);\n                return fn(Server.errors.UNKNOWN_SID, {\n                    sid\n                });\n            }\n            const previousTransport = this.clients[sid].transport.name;\n            if (!upgrade && previousTransport !== transport) {\n                debug(\"bad request: unexpected transport without upgrade\");\n                return fn(Server.errors.BAD_REQUEST, {\n                    name: \"TRANSPORT_MISMATCH\",\n                    transport,\n                    previousTransport\n                });\n            }\n        }\n        else {\n            // handshake is GET only\n            if (\"GET\" !== req.method) {\n                return fn(Server.errors.BAD_HANDSHAKE_METHOD, {\n                    method: req.method\n                });\n            }\n            if (transport === \"websocket\" && !upgrade) {\n                debug(\"invalid transport upgrade\");\n                return fn(Server.errors.BAD_REQUEST, {\n                    name: \"TRANSPORT_HANDSHAKE_ERROR\"\n                });\n            }\n            if (!this.opts.allowRequest)\n                return fn();\n            return this.opts.allowRequest(req, (message, success) => {\n                if (!success) {\n                    return fn(Server.errors.FORBIDDEN, {\n                        message\n                    });\n                }\n                fn();\n            });\n        }\n        fn();\n    }\n    /**\n     * Closes all clients.\n     *\n     * @api public\n     */\n    close() {\n        debug(\"closing all open clients\");\n        for (let i in this.clients) {\n            if (this.clients.hasOwnProperty(i)) {\n                this.clients[i].close(true);\n            }\n        }\n        this.cleanup();\n        return this;\n    }\n    /**\n     * generate a socket id.\n     * Overwrite this method to generate your custom socket id\n     *\n     * @param {Object} request object\n     * @api public\n     */\n    generateId(req) {\n        return base64id.generateId();\n    }\n    /**\n     * Handshakes a new client.\n     *\n     * @param {String} transport name\n     * @param {Object} request object\n     * @param {Function} closeConnection\n     *\n     * @api protected\n     */\n    async handshake(transportName, req, closeConnection) {\n        const protocol = req._query.EIO === \"4\" ? 4 : 3; // 3rd revision by default\n        if (protocol === 3 && !this.opts.allowEIO3) {\n            debug(\"unsupported protocol version\");\n            this.emit(\"connection_error\", {\n                req,\n                code: Server.errors.UNSUPPORTED_PROTOCOL_VERSION,\n                message: Server.errorMessages[Server.errors.UNSUPPORTED_PROTOCOL_VERSION],\n                context: {\n                    protocol\n                }\n            });\n            closeConnection(Server.errors.UNSUPPORTED_PROTOCOL_VERSION);\n            return;\n        }\n        let id;\n        try {\n            id = await this.generateId(req);\n        }\n        catch (e) {\n            debug(\"error while generating an id\");\n            this.emit(\"connection_error\", {\n                req,\n                code: Server.errors.BAD_REQUEST,\n                message: Server.errorMessages[Server.errors.BAD_REQUEST],\n                context: {\n                    name: \"ID_GENERATION_ERROR\",\n                    error: e\n                }\n            });\n            closeConnection(Server.errors.BAD_REQUEST);\n            return;\n        }\n        debug('handshaking client \"%s\"', id);\n        try {\n            var transport = this.createTransport(transportName, req);\n            if (\"polling\" === transportName) {\n                transport.maxHttpBufferSize = this.opts.maxHttpBufferSize;\n                transport.httpCompression = this.opts.httpCompression;\n            }\n            else if (\"websocket\" === transportName) {\n                transport.perMessageDeflate = this.opts.perMessageDeflate;\n            }\n            if (req._query && req._query.b64) {\n                transport.supportsBinary = false;\n            }\n            else {\n                transport.supportsBinary = true;\n            }\n        }\n        catch (e) {\n            debug('error handshaking to transport \"%s\"', transportName);\n            this.emit(\"connection_error\", {\n                req,\n                code: Server.errors.BAD_REQUEST,\n                message: Server.errorMessages[Server.errors.BAD_REQUEST],\n                context: {\n                    name: \"TRANSPORT_HANDSHAKE_ERROR\",\n                    error: e\n                }\n            });\n            closeConnection(Server.errors.BAD_REQUEST);\n            return;\n        }\n        const socket = new socket_1.Socket(id, this, transport, req, protocol);\n        transport.on(\"headers\", (headers, req) => {\n            const isInitialRequest = !req._query.sid;\n            if (isInitialRequest) {\n                if (this.opts.cookie) {\n                    headers[\"Set-Cookie\"] = [\n                        // @ts-ignore\n                        (0, cookie_1.serialize)(this.opts.cookie.name, id, this.opts.cookie)\n                    ];\n                }\n                this.emit(\"initial_headers\", headers, req);\n            }\n            this.emit(\"headers\", headers, req);\n        });\n        transport.onRequest(req);\n        this.clients[id] = socket;\n        this.clientsCount++;\n        socket.once(\"close\", () => {\n            delete this.clients[id];\n            this.clientsCount--;\n        });\n        this.emit(\"connection\", socket);\n        return transport;\n    }\n}\nexports.BaseServer = BaseServer;\n/**\n * Protocol errors mappings.\n */\nBaseServer.errors = {\n    UNKNOWN_TRANSPORT: 0,\n    UNKNOWN_SID: 1,\n    BAD_HANDSHAKE_METHOD: 2,\n    BAD_REQUEST: 3,\n    FORBIDDEN: 4,\n    UNSUPPORTED_PROTOCOL_VERSION: 5\n};\nBaseServer.errorMessages = {\n    0: \"Transport unknown\",\n    1: \"Session ID unknown\",\n    2: \"Bad handshake method\",\n    3: \"Bad request\",\n    4: \"Forbidden\",\n    5: \"Unsupported protocol version\"\n};\nclass Server extends BaseServer {\n    /**\n     * Initialize websocket server\n     *\n     * @api protected\n     */\n    init() {\n        if (!~this.opts.transports.indexOf(\"websocket\"))\n            return;\n        if (this.ws)\n            this.ws.close();\n        this.ws = new this.opts.wsEngine({\n            noServer: true,\n            clientTracking: false,\n            perMessageDeflate: this.opts.perMessageDeflate,\n            maxPayload: this.opts.maxHttpBufferSize\n        });\n        if (typeof this.ws.on === \"function\") {\n            this.ws.on(\"headers\", (headersArray, req) => {\n                // note: 'ws' uses an array of headers, while Engine.IO uses an object (response.writeHead() accepts both formats)\n                // we could also try to parse the array and then sync the values, but that will be error-prone\n                const additionalHeaders = {};\n                const isInitialRequest = !req._query.sid;\n                if (isInitialRequest) {\n                    this.emit(\"initial_headers\", additionalHeaders, req);\n                }\n                this.emit(\"headers\", additionalHeaders, req);\n                Object.keys(additionalHeaders).forEach(key => {\n                    headersArray.push(`${key}: ${additionalHeaders[key]}`);\n                });\n            });\n        }\n    }\n    cleanup() {\n        if (this.ws) {\n            debug(\"closing webSocketServer\");\n            this.ws.close();\n            // don't delete this.ws because it can be used again if the http server starts listening again\n        }\n    }\n    /**\n     * Prepares a request by processing the query string.\n     *\n     * @api private\n     */\n    prepare(req) {\n        // try to leverage pre-existing `req._query` (e.g: from connect)\n        if (!req._query) {\n            req._query = ~req.url.indexOf(\"?\") ? qs.parse((0, url_1.parse)(req.url).query) : {};\n        }\n    }\n    createTransport(transportName, req) {\n        return new transports_1.default[transportName](req);\n    }\n    /**\n     * Handles an Engine.IO HTTP request.\n     *\n     * @param {http.IncomingMessage} request\n     * @param {http.ServerResponse|http.OutgoingMessage} response\n     * @api public\n     */\n    handleRequest(req, res) {\n        debug('handling \"%s\" http request \"%s\"', req.method, req.url);\n        this.prepare(req);\n        req.res = res;\n        const callback = (errorCode, errorContext) => {\n            if (errorCode !== undefined) {\n                this.emit(\"connection_error\", {\n                    req,\n                    code: errorCode,\n                    message: Server.errorMessages[errorCode],\n                    context: errorContext\n                });\n                abortRequest(res, errorCode, errorContext);\n                return;\n            }\n            if (req._query.sid) {\n                debug(\"setting new request for existing client\");\n                this.clients[req._query.sid].transport.onRequest(req);\n            }\n            else {\n                const closeConnection = (errorCode, errorContext) => abortRequest(res, errorCode, errorContext);\n                this.handshake(req._query.transport, req, closeConnection);\n            }\n        };\n        if (this.corsMiddleware) {\n            this.corsMiddleware.call(null, req, res, () => {\n                this.verify(req, false, callback);\n            });\n        }\n        else {\n            this.verify(req, false, callback);\n        }\n    }\n    /**\n     * Handles an Engine.IO HTTP Upgrade.\n     *\n     * @api public\n     */\n    handleUpgrade(req, socket, upgradeHead) {\n        this.prepare(req);\n        this.verify(req, true, (errorCode, errorContext) => {\n            if (errorCode) {\n                this.emit(\"connection_error\", {\n                    req,\n                    code: errorCode,\n                    message: Server.errorMessages[errorCode],\n                    context: errorContext\n                });\n                abortUpgrade(socket, errorCode, errorContext);\n                return;\n            }\n            const head = Buffer.from(upgradeHead); // eslint-disable-line node/no-deprecated-api\n            upgradeHead = null;\n            // delegate to ws\n            this.ws.handleUpgrade(req, socket, head, websocket => {\n                this.onWebSocket(req, socket, websocket);\n            });\n        });\n    }\n    /**\n     * Called upon a ws.io connection.\n     *\n     * @param {ws.Socket} websocket\n     * @api private\n     */\n    onWebSocket(req, socket, websocket) {\n        websocket.on(\"error\", onUpgradeError);\n        if (transports_1.default[req._query.transport] !== undefined &&\n            !transports_1.default[req._query.transport].prototype.handlesUpgrades) {\n            debug(\"transport doesnt handle upgraded requests\");\n            websocket.close();\n            return;\n        }\n        // get client id\n        const id = req._query.sid;\n        // keep a reference to the ws.Socket\n        req.websocket = websocket;\n        if (id) {\n            const client = this.clients[id];\n            if (!client) {\n                debug(\"upgrade attempt for closed client\");\n                websocket.close();\n            }\n            else if (client.upgrading) {\n                debug(\"transport has already been trying to upgrade\");\n                websocket.close();\n            }\n            else if (client.upgraded) {\n                debug(\"transport had already been upgraded\");\n                websocket.close();\n            }\n            else {\n                debug(\"upgrading existing transport\");\n                // transport error handling takes over\n                websocket.removeListener(\"error\", onUpgradeError);\n                const transport = this.createTransport(req._query.transport, req);\n                if (req._query && req._query.b64) {\n                    transport.supportsBinary = false;\n                }\n                else {\n                    transport.supportsBinary = true;\n                }\n                transport.perMessageDeflate = this.opts.perMessageDeflate;\n                client.maybeUpgrade(transport);\n            }\n        }\n        else {\n            const closeConnection = (errorCode, errorContext) => abortUpgrade(socket, errorCode, errorContext);\n            this.handshake(req._query.transport, req, closeConnection);\n        }\n        function onUpgradeError() {\n            debug(\"websocket error before upgrade\");\n            // websocket.close() not needed\n        }\n    }\n    /**\n     * Captures upgrade requests for a http.Server.\n     *\n     * @param {http.Server} server\n     * @param {Object} options\n     * @api public\n     */\n    attach(server, options = {}) {\n        let path = (options.path || \"/engine.io\").replace(/\\/$/, \"\");\n        const destroyUpgradeTimeout = options.destroyUpgradeTimeout || 1000;\n        // normalize path\n        path += \"/\";\n        function check(req) {\n            return path === req.url.substr(0, path.length);\n        }\n        // cache and clean up listeners\n        const listeners = server.listeners(\"request\").slice(0);\n        server.removeAllListeners(\"request\");\n        server.on(\"close\", this.close.bind(this));\n        server.on(\"listening\", this.init.bind(this));\n        // add request handler\n        server.on(\"request\", (req, res) => {\n            if (check(req)) {\n                debug('intercepting request for path \"%s\"', path);\n                this.handleRequest(req, res);\n            }\n            else {\n                let i = 0;\n                const l = listeners.length;\n                for (; i < l; i++) {\n                    listeners[i].call(server, req, res);\n                }\n            }\n        });\n        if (~this.opts.transports.indexOf(\"websocket\")) {\n            server.on(\"upgrade\", (req, socket, head) => {\n                if (check(req)) {\n                    this.handleUpgrade(req, socket, head);\n                }\n                else if (false !== options.destroyUpgrade) {\n                    // default node behavior is to disconnect when no handlers\n                    // but by adding a handler, we prevent that\n                    // and if no eio thing handles the upgrade\n                    // then the socket needs to die!\n                    setTimeout(function () {\n                        // @ts-ignore\n                        if (socket.writable && socket.bytesWritten <= 0) {\n                            return socket.end();\n                        }\n                    }, destroyUpgradeTimeout);\n                }\n            });\n        }\n    }\n}\nexports.Server = Server;\n/**\n * Close the HTTP long-polling request\n *\n * @param res - the response object\n * @param errorCode - the error code\n * @param errorContext - additional error context\n *\n * @api private\n */\nfunction abortRequest(res, errorCode, errorContext) {\n    const statusCode = errorCode === Server.errors.FORBIDDEN ? 403 : 400;\n    const message = errorContext && errorContext.message\n        ? errorContext.message\n        : Server.errorMessages[errorCode];\n    res.writeHead(statusCode, { \"Content-Type\": \"application/json\" });\n    res.end(JSON.stringify({\n        code: errorCode,\n        message\n    }));\n}\n/**\n * Close the WebSocket connection\n *\n * @param {net.Socket} socket\n * @param {string} errorCode - the error code\n * @param {object} errorContext - additional error context\n *\n * @api private\n */\nfunction abortUpgrade(socket, errorCode, errorContext = {}) {\n    socket.on(\"error\", () => {\n        debug(\"ignoring error from closed connection\");\n    });\n    if (socket.writable) {\n        const message = errorContext.message || Server.errorMessages[errorCode];\n        const length = Buffer.byteLength(message);\n        socket.write(\"HTTP/1.1 400 Bad Request\\r\\n\" +\n            \"Connection: close\\r\\n\" +\n            \"Content-type: text/html\\r\\n\" +\n            \"Content-Length: \" +\n            length +\n            \"\\r\\n\" +\n            \"\\r\\n\" +\n            message);\n    }\n    socket.destroy();\n}\n/* eslint-disable */\n/**\n * From https://github.com/nodejs/node/blob/v8.4.0/lib/_http_common.js#L303-L354\n *\n * True if val contains an invalid field-vchar\n *  field-value    = *( field-content / obs-fold )\n *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n *  field-vchar    = VCHAR / obs-text\n *\n * checkInvalidHeaderChar() is currently designed to be inlinable by v8,\n * so take care when making changes to the implementation so that the source\n * code size does not exceed v8's default max_inlined_source_size setting.\n **/\n// prettier-ignore\nconst validHdrChars = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 // ... 255\n];\nfunction checkInvalidHeaderChar(val) {\n    val += \"\";\n    if (val.length < 1)\n        return false;\n    if (!validHdrChars[val.charCodeAt(0)]) {\n        debug('invalid header, index 0, char \"%s\"', val.charCodeAt(0));\n        return true;\n    }\n    if (val.length < 2)\n        return false;\n    if (!validHdrChars[val.charCodeAt(1)]) {\n        debug('invalid header, index 1, char \"%s\"', val.charCodeAt(1));\n        return true;\n    }\n    if (val.length < 3)\n        return false;\n    if (!validHdrChars[val.charCodeAt(2)]) {\n        debug('invalid header, index 2, char \"%s\"', val.charCodeAt(2));\n        return true;\n    }\n    if (val.length < 4)\n        return false;\n    if (!validHdrChars[val.charCodeAt(3)]) {\n        debug('invalid header, index 3, char \"%s\"', val.charCodeAt(3));\n        return true;\n    }\n    for (let i = 4; i < val.length; ++i) {\n        if (!validHdrChars[val.charCodeAt(i)]) {\n            debug('invalid header, index \"%i\", char \"%s\"', i, val.charCodeAt(i));\n            return true;\n        }\n    }\n    return false;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}