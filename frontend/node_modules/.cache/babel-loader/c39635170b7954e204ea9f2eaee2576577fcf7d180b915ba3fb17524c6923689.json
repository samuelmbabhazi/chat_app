{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Namespace = exports.RESERVED_EVENTS = void 0;\nconst socket_1 = require(\"./socket\");\nconst typed_events_1 = require(\"./typed-events\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst broadcast_operator_1 = require(\"./broadcast-operator\");\nconst debug = (0, debug_1.default)(\"socket.io:namespace\");\nexports.RESERVED_EVENTS = new Set([\"connect\", \"connection\", \"new_namespace\"]);\n/**\n * A Namespace is a communication channel that allows you to split the logic of your application over a single shared\n * connection.\n *\n * Each namespace has its own:\n *\n * - event handlers\n *\n * ```\n * io.of(\"/orders\").on(\"connection\", (socket) => {\n *   socket.on(\"order:list\", () => {});\n *   socket.on(\"order:create\", () => {});\n * });\n *\n * io.of(\"/users\").on(\"connection\", (socket) => {\n *   socket.on(\"user:list\", () => {});\n * });\n * ```\n *\n * - rooms\n *\n * ```\n * const orderNamespace = io.of(\"/orders\");\n *\n * orderNamespace.on(\"connection\", (socket) => {\n *   socket.join(\"room1\");\n *   orderNamespace.to(\"room1\").emit(\"hello\");\n * });\n *\n * const userNamespace = io.of(\"/users\");\n *\n * userNamespace.on(\"connection\", (socket) => {\n *   socket.join(\"room1\"); // distinct from the room in the \"orders\" namespace\n *   userNamespace.to(\"room1\").emit(\"holà\");\n * });\n * ```\n *\n * - middlewares\n *\n * ```\n * const orderNamespace = io.of(\"/orders\");\n *\n * orderNamespace.use((socket, next) => {\n *   // ensure the socket has access to the \"orders\" namespace\n * });\n *\n * const userNamespace = io.of(\"/users\");\n *\n * userNamespace.use((socket, next) => {\n *   // ensure the socket has access to the \"users\" namespace\n * });\n * ```\n */\nclass Namespace extends typed_events_1.StrictEventEmitter {\n  /**\n   * Namespace constructor.\n   *\n   * @param server instance\n   * @param name\n   */\n  constructor(server, name) {\n    super();\n    this.sockets = new Map();\n    /** @private */\n    this._fns = [];\n    /** @private */\n    this._ids = 0;\n    this.server = server;\n    this.name = name;\n    this._initAdapter();\n  }\n  /**\n   * Initializes the `Adapter` for this nsp.\n   * Run upon changing adapter by `Server#adapter`\n   * in addition to the constructor.\n   *\n   * @private\n   */\n  _initAdapter() {\n    // @ts-ignore\n    this.adapter = new (this.server.adapter())(this);\n  }\n  /**\n   * Registers a middleware, which is a function that gets executed for every incoming {@link Socket}.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.use((socket, next) => {\n   *   // ...\n   *   next();\n   * });\n   *\n   * @param fn - the middleware function\n   */\n  use(fn) {\n    this._fns.push(fn);\n    return this;\n  }\n  /**\n   * Executes the middleware for an incoming client.\n   *\n   * @param socket - the socket that will get added\n   * @param fn - last fn call in the middleware\n   * @private\n   */\n  run(socket, fn) {\n    const fns = this._fns.slice(0);\n    if (!fns.length) return fn(null);\n    function run(i) {\n      fns[i](socket, function (err) {\n        // upon error, short-circuit\n        if (err) return fn(err);\n        // if no middleware left, summon callback\n        if (!fns[i + 1]) return fn(null);\n        // go on to next\n        run(i + 1);\n      });\n    }\n    run(0);\n  }\n  /**\n   * Targets a room when emitting.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n   * myNamespace.to(\"room-101\").emit(\"foo\", \"bar\");\n   *\n   * // with an array of rooms (a client will be notified at most once)\n   * myNamespace.to([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n   *\n   * // with multiple chained calls\n   * myNamespace.to(\"room-101\").to(\"room-102\").emit(\"foo\", \"bar\");\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n  to(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).to(room);\n  }\n  /**\n   * Targets a room when emitting. Similar to `to()`, but might feel clearer in some cases:\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // disconnect all clients in the \"room-101\" room\n   * myNamespace.in(\"room-101\").disconnectSockets();\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n  in(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).in(room);\n  }\n  /**\n   * Excludes a room when emitting.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // the \"foo\" event will be broadcast to all connected clients, except the ones that are in the \"room-101\" room\n   * myNamespace.except(\"room-101\").emit(\"foo\", \"bar\");\n   *\n   * // with an array of rooms\n   * myNamespace.except([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n   *\n   * // with multiple chained calls\n   * myNamespace.except(\"room-101\").except(\"room-102\").emit(\"foo\", \"bar\");\n   *\n   * @param room - a room, or an array of rooms\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n  except(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).except(room);\n  }\n  /**\n   * Adds a new client.\n   *\n   * @return {Socket}\n   * @private\n   */\n  _add(client, query, fn) {\n    debug(\"adding socket to nsp %s\", this.name);\n    const socket = new socket_1.Socket(this, client, query);\n    this.run(socket, err => {\n      process.nextTick(() => {\n        if (\"open\" !== client.conn.readyState) {\n          debug(\"next called after client was closed - ignoring socket\");\n          socket._cleanup();\n          return;\n        }\n        if (err) {\n          debug(\"middleware error, sending CONNECT_ERROR packet to the client\");\n          socket._cleanup();\n          if (client.conn.protocol === 3) {\n            return socket._error(err.data || err.message);\n          } else {\n            return socket._error({\n              message: err.message,\n              data: err.data\n            });\n          }\n        }\n        // track socket\n        this.sockets.set(socket.id, socket);\n        // it's paramount that the internal `onconnect` logic\n        // fires before user-set events to prevent state order\n        // violations (such as a disconnection before the connection\n        // logic is complete)\n        socket._onconnect();\n        if (fn) fn();\n        // fire user-set events\n        this.emitReserved(\"connect\", socket);\n        this.emitReserved(\"connection\", socket);\n      });\n    });\n    return socket;\n  }\n  /**\n   * Removes a client. Called by each `Socket`.\n   *\n   * @private\n   */\n  _remove(socket) {\n    if (this.sockets.has(socket.id)) {\n      this.sockets.delete(socket.id);\n    } else {\n      debug(\"ignoring remove for %s\", socket.id);\n    }\n  }\n  /**\n   * Emits to all connected clients.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.emit(\"hello\", \"world\");\n   *\n   * // all serializable datastructures are supported (no need to call JSON.stringify)\n   * myNamespace.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n   *\n   * // with an acknowledgement from the clients\n   * myNamespace.timeout(1000).emit(\"some-event\", (err, responses) => {\n   *   if (err) {\n   *     // some clients did not acknowledge the event in the given delay\n   *   } else {\n   *     console.log(responses); // one response per client\n   *   }\n   * });\n   *\n   * @return Always true\n   */\n  emit(ev) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).emit(ev, ...args);\n  }\n  /**\n   * Sends a `message` event to all clients.\n   *\n   * This method mimics the WebSocket.send() method.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.send(\"hello\");\n   *\n   * // this is equivalent to\n   * myNamespace.emit(\"message\", \"hello\");\n   *\n   * @return self\n   */\n  send() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    this.emit(\"message\", ...args);\n    return this;\n  }\n  /**\n   * Sends a `message` event to all clients. Sends a `message` event. Alias of {@link send}.\n   *\n   * @return self\n   */\n  write() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    this.emit(\"message\", ...args);\n    return this;\n  }\n  /**\n   * Sends a message to the other Socket.IO servers of the cluster.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.serverSideEmit(\"hello\", \"world\");\n   *\n   * myNamespace.on(\"hello\", (arg1) => {\n   *   console.log(arg1); // prints \"world\"\n   * });\n   *\n   * // acknowledgements (without binary content) are supported too:\n   * myNamespace.serverSideEmit(\"ping\", (err, responses) => {\n   *  if (err) {\n   *     // some clients did not acknowledge the event in the given delay\n   *   } else {\n   *     console.log(responses); // one response per client\n   *   }\n   * });\n   *\n   * myNamespace.on(\"ping\", (cb) => {\n   *   cb(\"pong\");\n   * });\n   *\n   * @param ev - the event name\n   * @param args - an array of arguments, which may include an acknowledgement callback at the end\n   */\n  serverSideEmit(ev) {\n    if (exports.RESERVED_EVENTS.has(ev)) {\n      throw new Error(`\"${String(ev)}\" is a reserved event name`);\n    }\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n    args.unshift(ev);\n    this.adapter.serverSideEmit(args);\n    return true;\n  }\n  /**\n   * Called when a packet is received from another Socket.IO server\n   *\n   * @param args - an array of arguments, which may include an acknowledgement callback at the end\n   *\n   * @private\n   */\n  _onServerSideEmit(args) {\n    super.emitUntyped.apply(this, args);\n  }\n  /**\n   * Gets a list of clients.\n   *\n   * @deprecated this method will be removed in the next major release, please use {@link Namespace#serverSideEmit} or\n   * {@link Namespace#fetchSockets} instead.\n   */\n  allSockets() {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).allSockets();\n  }\n  /**\n   * Sets the compress flag.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.compress(false).emit(\"hello\");\n   *\n   * @param compress - if `true`, compresses the sending data\n   * @return self\n   */\n  compress(compress) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).compress(compress);\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n   * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n   * and is in the middle of a request-response cycle).\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.volatile.emit(\"hello\"); // the clients may or may not receive it\n   *\n   * @return self\n   */\n  get volatile() {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).volatile;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // the “foo” event will be broadcast to all connected clients on this node\n   * myNamespace.local.emit(\"foo\", \"bar\");\n   *\n   * @return a new {@link BroadcastOperator} instance for chaining\n   */\n  get local() {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).local;\n  }\n  /**\n   * Adds a timeout in milliseconds for the next operation.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * myNamespace.timeout(1000).emit(\"some-event\", (err, responses) => {\n   *   if (err) {\n   *     // some clients did not acknowledge the event in the given delay\n   *   } else {\n   *     console.log(responses); // one response per client\n   *   }\n   * });\n   *\n   * @param timeout\n   */\n  timeout(timeout) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).timeout(timeout);\n  }\n  /**\n   * Returns the matching socket instances.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // return all Socket instances\n   * const sockets = await myNamespace.fetchSockets();\n   *\n   * // return all Socket instances in the \"room1\" room\n   * const sockets = await myNamespace.in(\"room1\").fetchSockets();\n   *\n   * for (const socket of sockets) {\n   *   console.log(socket.id);\n   *   console.log(socket.handshake);\n   *   console.log(socket.rooms);\n   *   console.log(socket.data);\n   *\n   *   socket.emit(\"hello\");\n   *   socket.join(\"room1\");\n   *   socket.leave(\"room2\");\n   *   socket.disconnect();\n   * }\n   */\n  fetchSockets() {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).fetchSockets();\n  }\n  /**\n   * Makes the matching socket instances join the specified rooms.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // make all socket instances join the \"room1\" room\n   * myNamespace.socketsJoin(\"room1\");\n   *\n   * // make all socket instances in the \"room1\" room join the \"room2\" and \"room3\" rooms\n   * myNamespace.in(\"room1\").socketsJoin([\"room2\", \"room3\"]);\n   *\n   * @param room - a room, or an array of rooms\n   */\n  socketsJoin(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsJoin(room);\n  }\n  /**\n   * Makes the matching socket instances leave the specified rooms.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // make all socket instances leave the \"room1\" room\n   * myNamespace.socketsLeave(\"room1\");\n   *\n   * // make all socket instances in the \"room1\" room leave the \"room2\" and \"room3\" rooms\n   * myNamespace.in(\"room1\").socketsLeave([\"room2\", \"room3\"]);\n   *\n   * @param room - a room, or an array of rooms\n   */\n  socketsLeave(room) {\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsLeave(room);\n  }\n  /**\n   * Makes the matching socket instances disconnect.\n   *\n   * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n   *\n   * @example\n   * const myNamespace = io.of(\"/my-namespace\");\n   *\n   * // make all socket instances disconnect (the connections might be kept alive for other namespaces)\n   * myNamespace.disconnectSockets();\n   *\n   * // make all socket instances in the \"room1\" room disconnect and close the underlying connections\n   * myNamespace.in(\"room1\").disconnectSockets(true);\n   *\n   * @param close - whether to close the underlying connection\n   */\n  disconnectSockets() {\n    let close = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return new broadcast_operator_1.BroadcastOperator(this.adapter).disconnectSockets(close);\n  }\n}\nexports.Namespace = Namespace;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Namespace","RESERVED_EVENTS","socket_1","require","typed_events_1","debug_1","broadcast_operator_1","debug","default","Set","StrictEventEmitter","constructor","server","name","sockets","Map","_fns","_ids","_initAdapter","adapter","use","fn","push","run","socket","fns","slice","length","i","err","to","room","BroadcastOperator","in","except","_add","client","query","Socket","process","nextTick","conn","readyState","_cleanup","protocol","_error","data","message","set","id","_onconnect","emitReserved","_remove","has","delete","emit","ev","args","send","write","serverSideEmit","Error","String","unshift","_onServerSideEmit","emitUntyped","apply","allSockets","compress","volatile","local","timeout","fetchSockets","socketsJoin","socketsLeave","disconnectSockets","close"],"sources":["/home/samuel/Documents/chatApp/node_modules/socket.io/dist/namespace.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Namespace = exports.RESERVED_EVENTS = void 0;\nconst socket_1 = require(\"./socket\");\nconst typed_events_1 = require(\"./typed-events\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst broadcast_operator_1 = require(\"./broadcast-operator\");\nconst debug = (0, debug_1.default)(\"socket.io:namespace\");\nexports.RESERVED_EVENTS = new Set([\"connect\", \"connection\", \"new_namespace\"]);\n/**\n * A Namespace is a communication channel that allows you to split the logic of your application over a single shared\n * connection.\n *\n * Each namespace has its own:\n *\n * - event handlers\n *\n * ```\n * io.of(\"/orders\").on(\"connection\", (socket) => {\n *   socket.on(\"order:list\", () => {});\n *   socket.on(\"order:create\", () => {});\n * });\n *\n * io.of(\"/users\").on(\"connection\", (socket) => {\n *   socket.on(\"user:list\", () => {});\n * });\n * ```\n *\n * - rooms\n *\n * ```\n * const orderNamespace = io.of(\"/orders\");\n *\n * orderNamespace.on(\"connection\", (socket) => {\n *   socket.join(\"room1\");\n *   orderNamespace.to(\"room1\").emit(\"hello\");\n * });\n *\n * const userNamespace = io.of(\"/users\");\n *\n * userNamespace.on(\"connection\", (socket) => {\n *   socket.join(\"room1\"); // distinct from the room in the \"orders\" namespace\n *   userNamespace.to(\"room1\").emit(\"holà\");\n * });\n * ```\n *\n * - middlewares\n *\n * ```\n * const orderNamespace = io.of(\"/orders\");\n *\n * orderNamespace.use((socket, next) => {\n *   // ensure the socket has access to the \"orders\" namespace\n * });\n *\n * const userNamespace = io.of(\"/users\");\n *\n * userNamespace.use((socket, next) => {\n *   // ensure the socket has access to the \"users\" namespace\n * });\n * ```\n */\nclass Namespace extends typed_events_1.StrictEventEmitter {\n    /**\n     * Namespace constructor.\n     *\n     * @param server instance\n     * @param name\n     */\n    constructor(server, name) {\n        super();\n        this.sockets = new Map();\n        /** @private */\n        this._fns = [];\n        /** @private */\n        this._ids = 0;\n        this.server = server;\n        this.name = name;\n        this._initAdapter();\n    }\n    /**\n     * Initializes the `Adapter` for this nsp.\n     * Run upon changing adapter by `Server#adapter`\n     * in addition to the constructor.\n     *\n     * @private\n     */\n    _initAdapter() {\n        // @ts-ignore\n        this.adapter = new (this.server.adapter())(this);\n    }\n    /**\n     * Registers a middleware, which is a function that gets executed for every incoming {@link Socket}.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.use((socket, next) => {\n     *   // ...\n     *   next();\n     * });\n     *\n     * @param fn - the middleware function\n     */\n    use(fn) {\n        this._fns.push(fn);\n        return this;\n    }\n    /**\n     * Executes the middleware for an incoming client.\n     *\n     * @param socket - the socket that will get added\n     * @param fn - last fn call in the middleware\n     * @private\n     */\n    run(socket, fn) {\n        const fns = this._fns.slice(0);\n        if (!fns.length)\n            return fn(null);\n        function run(i) {\n            fns[i](socket, function (err) {\n                // upon error, short-circuit\n                if (err)\n                    return fn(err);\n                // if no middleware left, summon callback\n                if (!fns[i + 1])\n                    return fn(null);\n                // go on to next\n                run(i + 1);\n            });\n        }\n        run(0);\n    }\n    /**\n     * Targets a room when emitting.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // the “foo” event will be broadcast to all connected clients in the “room-101” room\n     * myNamespace.to(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     * // with an array of rooms (a client will be notified at most once)\n     * myNamespace.to([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     * // with multiple chained calls\n     * myNamespace.to(\"room-101\").to(\"room-102\").emit(\"foo\", \"bar\");\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    to(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).to(room);\n    }\n    /**\n     * Targets a room when emitting. Similar to `to()`, but might feel clearer in some cases:\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // disconnect all clients in the \"room-101\" room\n     * myNamespace.in(\"room-101\").disconnectSockets();\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    in(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).in(room);\n    }\n    /**\n     * Excludes a room when emitting.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // the \"foo\" event will be broadcast to all connected clients, except the ones that are in the \"room-101\" room\n     * myNamespace.except(\"room-101\").emit(\"foo\", \"bar\");\n     *\n     * // with an array of rooms\n     * myNamespace.except([\"room-101\", \"room-102\"]).emit(\"foo\", \"bar\");\n     *\n     * // with multiple chained calls\n     * myNamespace.except(\"room-101\").except(\"room-102\").emit(\"foo\", \"bar\");\n     *\n     * @param room - a room, or an array of rooms\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    except(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).except(room);\n    }\n    /**\n     * Adds a new client.\n     *\n     * @return {Socket}\n     * @private\n     */\n    _add(client, query, fn) {\n        debug(\"adding socket to nsp %s\", this.name);\n        const socket = new socket_1.Socket(this, client, query);\n        this.run(socket, (err) => {\n            process.nextTick(() => {\n                if (\"open\" !== client.conn.readyState) {\n                    debug(\"next called after client was closed - ignoring socket\");\n                    socket._cleanup();\n                    return;\n                }\n                if (err) {\n                    debug(\"middleware error, sending CONNECT_ERROR packet to the client\");\n                    socket._cleanup();\n                    if (client.conn.protocol === 3) {\n                        return socket._error(err.data || err.message);\n                    }\n                    else {\n                        return socket._error({\n                            message: err.message,\n                            data: err.data,\n                        });\n                    }\n                }\n                // track socket\n                this.sockets.set(socket.id, socket);\n                // it's paramount that the internal `onconnect` logic\n                // fires before user-set events to prevent state order\n                // violations (such as a disconnection before the connection\n                // logic is complete)\n                socket._onconnect();\n                if (fn)\n                    fn();\n                // fire user-set events\n                this.emitReserved(\"connect\", socket);\n                this.emitReserved(\"connection\", socket);\n            });\n        });\n        return socket;\n    }\n    /**\n     * Removes a client. Called by each `Socket`.\n     *\n     * @private\n     */\n    _remove(socket) {\n        if (this.sockets.has(socket.id)) {\n            this.sockets.delete(socket.id);\n        }\n        else {\n            debug(\"ignoring remove for %s\", socket.id);\n        }\n    }\n    /**\n     * Emits to all connected clients.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * myNamespace.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the clients\n     * myNamespace.timeout(1000).emit(\"some-event\", (err, responses) => {\n     *   if (err) {\n     *     // some clients did not acknowledge the event in the given delay\n     *   } else {\n     *     console.log(responses); // one response per client\n     *   }\n     * });\n     *\n     * @return Always true\n     */\n    emit(ev, ...args) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).emit(ev, ...args);\n    }\n    /**\n     * Sends a `message` event to all clients.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.send(\"hello\");\n     *\n     * // this is equivalent to\n     * myNamespace.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        this.emit(\"message\", ...args);\n        return this;\n    }\n    /**\n     * Sends a `message` event to all clients. Sends a `message` event. Alias of {@link send}.\n     *\n     * @return self\n     */\n    write(...args) {\n        this.emit(\"message\", ...args);\n        return this;\n    }\n    /**\n     * Sends a message to the other Socket.IO servers of the cluster.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.serverSideEmit(\"hello\", \"world\");\n     *\n     * myNamespace.on(\"hello\", (arg1) => {\n     *   console.log(arg1); // prints \"world\"\n     * });\n     *\n     * // acknowledgements (without binary content) are supported too:\n     * myNamespace.serverSideEmit(\"ping\", (err, responses) => {\n     *  if (err) {\n     *     // some clients did not acknowledge the event in the given delay\n     *   } else {\n     *     console.log(responses); // one response per client\n     *   }\n     * });\n     *\n     * myNamespace.on(\"ping\", (cb) => {\n     *   cb(\"pong\");\n     * });\n     *\n     * @param ev - the event name\n     * @param args - an array of arguments, which may include an acknowledgement callback at the end\n     */\n    serverSideEmit(ev, ...args) {\n        if (exports.RESERVED_EVENTS.has(ev)) {\n            throw new Error(`\"${String(ev)}\" is a reserved event name`);\n        }\n        args.unshift(ev);\n        this.adapter.serverSideEmit(args);\n        return true;\n    }\n    /**\n     * Called when a packet is received from another Socket.IO server\n     *\n     * @param args - an array of arguments, which may include an acknowledgement callback at the end\n     *\n     * @private\n     */\n    _onServerSideEmit(args) {\n        super.emitUntyped.apply(this, args);\n    }\n    /**\n     * Gets a list of clients.\n     *\n     * @deprecated this method will be removed in the next major release, please use {@link Namespace#serverSideEmit} or\n     * {@link Namespace#fetchSockets} instead.\n     */\n    allSockets() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).allSockets();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).compress(compress);\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.volatile.emit(\"hello\"); // the clients may or may not receive it\n     *\n     * @return self\n     */\n    get volatile() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).volatile;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // the “foo” event will be broadcast to all connected clients on this node\n     * myNamespace.local.emit(\"foo\", \"bar\");\n     *\n     * @return a new {@link BroadcastOperator} instance for chaining\n     */\n    get local() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).local;\n    }\n    /**\n     * Adds a timeout in milliseconds for the next operation.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * myNamespace.timeout(1000).emit(\"some-event\", (err, responses) => {\n     *   if (err) {\n     *     // some clients did not acknowledge the event in the given delay\n     *   } else {\n     *     console.log(responses); // one response per client\n     *   }\n     * });\n     *\n     * @param timeout\n     */\n    timeout(timeout) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).timeout(timeout);\n    }\n    /**\n     * Returns the matching socket instances.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // return all Socket instances\n     * const sockets = await myNamespace.fetchSockets();\n     *\n     * // return all Socket instances in the \"room1\" room\n     * const sockets = await myNamespace.in(\"room1\").fetchSockets();\n     *\n     * for (const socket of sockets) {\n     *   console.log(socket.id);\n     *   console.log(socket.handshake);\n     *   console.log(socket.rooms);\n     *   console.log(socket.data);\n     *\n     *   socket.emit(\"hello\");\n     *   socket.join(\"room1\");\n     *   socket.leave(\"room2\");\n     *   socket.disconnect();\n     * }\n     */\n    fetchSockets() {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).fetchSockets();\n    }\n    /**\n     * Makes the matching socket instances join the specified rooms.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // make all socket instances join the \"room1\" room\n     * myNamespace.socketsJoin(\"room1\");\n     *\n     * // make all socket instances in the \"room1\" room join the \"room2\" and \"room3\" rooms\n     * myNamespace.in(\"room1\").socketsJoin([\"room2\", \"room3\"]);\n     *\n     * @param room - a room, or an array of rooms\n     */\n    socketsJoin(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsJoin(room);\n    }\n    /**\n     * Makes the matching socket instances leave the specified rooms.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // make all socket instances leave the \"room1\" room\n     * myNamespace.socketsLeave(\"room1\");\n     *\n     * // make all socket instances in the \"room1\" room leave the \"room2\" and \"room3\" rooms\n     * myNamespace.in(\"room1\").socketsLeave([\"room2\", \"room3\"]);\n     *\n     * @param room - a room, or an array of rooms\n     */\n    socketsLeave(room) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).socketsLeave(room);\n    }\n    /**\n     * Makes the matching socket instances disconnect.\n     *\n     * Note: this method also works within a cluster of multiple Socket.IO servers, with a compatible {@link Adapter}.\n     *\n     * @example\n     * const myNamespace = io.of(\"/my-namespace\");\n     *\n     * // make all socket instances disconnect (the connections might be kept alive for other namespaces)\n     * myNamespace.disconnectSockets();\n     *\n     * // make all socket instances in the \"room1\" room disconnect and close the underlying connections\n     * myNamespace.in(\"room1\").disconnectSockets(true);\n     *\n     * @param close - whether to close the underlying connection\n     */\n    disconnectSockets(close = false) {\n        return new broadcast_operator_1.BroadcastOperator(this.adapter).disconnectSockets(close);\n    }\n}\nexports.Namespace = Namespace;\n"],"mappings":"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;EACIC,OAAO,CAACA,OAAO,EAAE;IACb,OAAO,IAAIjE,oBAAoB,CAAC0B,iBAAiB,CAAC,IAAI,CAACb,OAAO,CAAC,CAACoD,OAAO,CAACA,OAAO,CAAC;EACpF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,YAAY,GAAG;IACX,OAAO,IAAIlE,oBAAoB,CAAC0B,iBAAiB,CAAC,IAAI,CAACb,OAAO,CAAC,CAACqD,YAAY,EAAE;EAClF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAAC1C,IAAI,EAAE;IACd,OAAO,IAAIzB,oBAAoB,CAAC0B,iBAAiB,CAAC,IAAI,CAACb,OAAO,CAAC,CAACsD,WAAW,CAAC1C,IAAI,CAAC;EACrF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI2C,YAAY,CAAC3C,IAAI,EAAE;IACf,OAAO,IAAIzB,oBAAoB,CAAC0B,iBAAiB,CAAC,IAAI,CAACb,OAAO,CAAC,CAACuD,YAAY,CAAC3C,IAAI,CAAC;EACtF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI4C,iBAAiB,GAAgB;IAAA,IAAfC,KAAK,uEAAG,KAAK;IAC3B,OAAO,IAAItE,oBAAoB,CAAC0B,iBAAiB,CAAC,IAAI,CAACb,OAAO,CAAC,CAACwD,iBAAiB,CAACC,KAAK,CAAC;EAC5F;AACJ;AACA9E,OAAO,CAACE,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}