{"ast":null,"code":"/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls$\" }] */\n\n'use strict';\n\nconst net = require('net');\nconst tls = require('tls');\nconst {\n  randomFillSync\n} = require('crypto');\nconst PerMessageDeflate = require('./permessage-deflate');\nconst {\n  EMPTY_BUFFER\n} = require('./constants');\nconst {\n  isValidStatusCode\n} = require('./validation');\nconst {\n  mask: applyMask,\n  toBuffer\n} = require('./buffer-util');\nconst mask = Buffer.alloc(4);\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   */\n  constructor(socket, extensions) {\n    this._extensions = extensions || {};\n    this._socket = socket;\n    this._firstFragment = true;\n    this._compress = false;\n    this._bufferedBytes = 0;\n    this._deflating = false;\n    this._queue = [];\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {Buffer} data The data to frame\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {Buffer[]} The framed data as a list of `Buffer` instances\n   * @public\n   */\n  static frame(data, options) {\n    const merge = options.mask && options.readOnly;\n    let offset = options.mask ? 6 : 2;\n    let payloadLength = data.length;\n    if (data.length >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (data.length > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n    const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n    target[1] = payloadLength;\n    if (payloadLength === 126) {\n      target.writeUInt16BE(data.length, 2);\n    } else if (payloadLength === 127) {\n      target.writeUInt32BE(0, 2);\n      target.writeUInt32BE(data.length, 6);\n    }\n    if (!options.mask) return [target, data];\n    randomFillSync(mask, 0, 4);\n    target[1] |= 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n    if (merge) {\n      applyMask(data, mask, target, offset, data.length);\n      return [target];\n    }\n    applyMask(data, mask, data, 0, data.length);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {(String|Buffer)} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  close(code, data, mask, cb) {\n    let buf;\n    if (code === undefined) {\n      buf = EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || !data.length) {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0);\n    } else {\n      const length = Buffer.byteLength(data);\n      if (length > 123) {\n        throw new RangeError('The message must not be greater than 123 bytes');\n      }\n      buf = Buffer.allocUnsafe(2 + length);\n      buf.writeUInt16BE(code, 0);\n      if (typeof data === 'string') {\n        buf.write(data, 2);\n      } else {\n        buf.set(data, 2);\n      }\n    }\n    if (this._deflating) {\n      this.enqueue([this.doClose, buf, mask, cb]);\n    } else {\n      this.doClose(buf, mask, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a close message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  doClose(data, mask, cb) {\n    this.sendFrame(Sender.frame(data, {\n      fin: true,\n      rsv1: false,\n      opcode: 0x08,\n      mask,\n      readOnly: false\n    }), cb);\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  ping(data, mask, cb) {\n    const buf = toBuffer(data);\n    if (buf.length > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n    if (this._deflating) {\n      this.enqueue([this.doPing, buf, mask, toBuffer.readOnly, cb]);\n    } else {\n      this.doPing(buf, mask, toBuffer.readOnly, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a ping message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  doPing(data, mask, readOnly, cb) {\n    this.sendFrame(Sender.frame(data, {\n      fin: true,\n      rsv1: false,\n      opcode: 0x09,\n      mask,\n      readOnly\n    }), cb);\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  pong(data, mask, cb) {\n    const buf = toBuffer(data);\n    if (buf.length > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n    if (this._deflating) {\n      this.enqueue([this.doPong, buf, mask, toBuffer.readOnly, cb]);\n    } else {\n      this.doPong(buf, mask, toBuffer.readOnly, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a pong message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  doPong(data, mask, readOnly, cb) {\n    this.sendFrame(Sender.frame(data, {\n      fin: true,\n      rsv1: false,\n      opcode: 0x0a,\n      mask,\n      readOnly\n    }), cb);\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  send(data, options, cb) {\n    const buf = toBuffer(data);\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    let opcode = options.binary ? 2 : 1;\n    let rsv1 = options.compress;\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (rsv1 && perMessageDeflate && perMessageDeflate.params[perMessageDeflate._isServer ? 'server_no_context_takeover' : 'client_no_context_takeover']) {\n        rsv1 = buf.length >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n    if (options.fin) this._firstFragment = true;\n    if (perMessageDeflate) {\n      const opts = {\n        fin: options.fin,\n        rsv1,\n        opcode,\n        mask: options.mask,\n        readOnly: toBuffer.readOnly\n      };\n      if (this._deflating) {\n        this.enqueue([this.dispatch, buf, this._compress, opts, cb]);\n      } else {\n        this.dispatch(buf, this._compress, opts, cb);\n      }\n    } else {\n      this.sendFrame(Sender.frame(buf, {\n        fin: options.fin,\n        rsv1: false,\n        opcode,\n        mask: options.mask,\n        readOnly: toBuffer.readOnly\n      }), cb);\n    }\n  }\n\n  /**\n   * Dispatches a data message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    this._bufferedBytes += data.length;\n    this._deflating = true;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      if (this._socket.destroyed) {\n        const err = new Error('The socket was closed while data was being compressed');\n        if (typeof cb === 'function') cb(err);\n        for (let i = 0; i < this._queue.length; i++) {\n          const callback = this._queue[i][4];\n          if (typeof callback === 'function') callback(err);\n        }\n        return;\n      }\n      this._bufferedBytes -= data.length;\n      this._deflating = false;\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue() {\n    while (!this._deflating && this._queue.length) {\n      const params = this._queue.shift();\n      this._bufferedBytes -= params[1].length;\n      Reflect.apply(params[0], this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue(params) {\n    this._bufferedBytes += params[1].length;\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.cork();\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n      this._socket.uncork();\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\nmodule.exports = Sender;","map":{"version":3,"names":["net","require","tls","randomFillSync","PerMessageDeflate","EMPTY_BUFFER","isValidStatusCode","mask","applyMask","toBuffer","Buffer","alloc","Sender","constructor","socket","extensions","_extensions","_socket","_firstFragment","_compress","_bufferedBytes","_deflating","_queue","frame","data","options","merge","readOnly","offset","payloadLength","length","target","allocUnsafe","fin","opcode","rsv1","writeUInt16BE","writeUInt32BE","close","code","cb","buf","undefined","TypeError","byteLength","RangeError","write","set","enqueue","doClose","sendFrame","ping","doPing","pong","doPong","send","perMessageDeflate","extensionName","binary","compress","params","_isServer","_threshold","opts","dispatch","_","destroyed","err","Error","i","callback","dequeue","shift","Reflect","apply","slice","push","list","cork","uncork","module","exports"],"sources":["/home/samuel/Documents/chatApp/node_modules/ws/lib/sender.js"],"sourcesContent":["/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls$\" }] */\n\n'use strict';\n\nconst net = require('net');\nconst tls = require('tls');\nconst { randomFillSync } = require('crypto');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst { EMPTY_BUFFER } = require('./constants');\nconst { isValidStatusCode } = require('./validation');\nconst { mask: applyMask, toBuffer } = require('./buffer-util');\n\nconst mask = Buffer.alloc(4);\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   */\n  constructor(socket, extensions) {\n    this._extensions = extensions || {};\n    this._socket = socket;\n\n    this._firstFragment = true;\n    this._compress = false;\n\n    this._bufferedBytes = 0;\n    this._deflating = false;\n    this._queue = [];\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {Buffer} data The data to frame\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {Buffer[]} The framed data as a list of `Buffer` instances\n   * @public\n   */\n  static frame(data, options) {\n    const merge = options.mask && options.readOnly;\n    let offset = options.mask ? 6 : 2;\n    let payloadLength = data.length;\n\n    if (data.length >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (data.length > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);\n\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    target[1] = payloadLength;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(data.length, 2);\n    } else if (payloadLength === 127) {\n      target.writeUInt32BE(0, 2);\n      target.writeUInt32BE(data.length, 6);\n    }\n\n    if (!options.mask) return [target, data];\n\n    randomFillSync(mask, 0, 4);\n\n    target[1] |= 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (merge) {\n      applyMask(data, mask, target, offset, data.length);\n      return [target];\n    }\n\n    applyMask(data, mask, data, 0, data.length);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {(String|Buffer)} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  close(code, data, mask, cb) {\n    let buf;\n\n    if (code === undefined) {\n      buf = EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || !data.length) {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0);\n    } else {\n      const length = Buffer.byteLength(data);\n\n      if (length > 123) {\n        throw new RangeError('The message must not be greater than 123 bytes');\n      }\n\n      buf = Buffer.allocUnsafe(2 + length);\n      buf.writeUInt16BE(code, 0);\n\n      if (typeof data === 'string') {\n        buf.write(data, 2);\n      } else {\n        buf.set(data, 2);\n      }\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doClose, buf, mask, cb]);\n    } else {\n      this.doClose(buf, mask, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a close message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  doClose(data, mask, cb) {\n    this.sendFrame(\n      Sender.frame(data, {\n        fin: true,\n        rsv1: false,\n        opcode: 0x08,\n        mask,\n        readOnly: false\n      }),\n      cb\n    );\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  ping(data, mask, cb) {\n    const buf = toBuffer(data);\n\n    if (buf.length > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doPing, buf, mask, toBuffer.readOnly, cb]);\n    } else {\n      this.doPing(buf, mask, toBuffer.readOnly, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a ping message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  doPing(data, mask, readOnly, cb) {\n    this.sendFrame(\n      Sender.frame(data, {\n        fin: true,\n        rsv1: false,\n        opcode: 0x09,\n        mask,\n        readOnly\n      }),\n      cb\n    );\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  pong(data, mask, cb) {\n    const buf = toBuffer(data);\n\n    if (buf.length > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doPong, buf, mask, toBuffer.readOnly, cb]);\n    } else {\n      this.doPong(buf, mask, toBuffer.readOnly, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a pong message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  doPong(data, mask, readOnly, cb) {\n    this.sendFrame(\n      Sender.frame(data, {\n        fin: true,\n        rsv1: false,\n        opcode: 0x0a,\n        mask,\n        readOnly\n      }),\n      cb\n    );\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  send(data, options, cb) {\n    const buf = toBuffer(data);\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    let opcode = options.binary ? 2 : 1;\n    let rsv1 = options.compress;\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (\n        rsv1 &&\n        perMessageDeflate &&\n        perMessageDeflate.params[\n          perMessageDeflate._isServer\n            ? 'server_no_context_takeover'\n            : 'client_no_context_takeover'\n        ]\n      ) {\n        rsv1 = buf.length >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    if (perMessageDeflate) {\n      const opts = {\n        fin: options.fin,\n        rsv1,\n        opcode,\n        mask: options.mask,\n        readOnly: toBuffer.readOnly\n      };\n\n      if (this._deflating) {\n        this.enqueue([this.dispatch, buf, this._compress, opts, cb]);\n      } else {\n        this.dispatch(buf, this._compress, opts, cb);\n      }\n    } else {\n      this.sendFrame(\n        Sender.frame(buf, {\n          fin: options.fin,\n          rsv1: false,\n          opcode,\n          mask: options.mask,\n          readOnly: toBuffer.readOnly\n        }),\n        cb\n      );\n    }\n  }\n\n  /**\n   * Dispatches a data message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    this._bufferedBytes += data.length;\n    this._deflating = true;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      if (this._socket.destroyed) {\n        const err = new Error(\n          'The socket was closed while data was being compressed'\n        );\n\n        if (typeof cb === 'function') cb(err);\n\n        for (let i = 0; i < this._queue.length; i++) {\n          const callback = this._queue[i][4];\n\n          if (typeof callback === 'function') callback(err);\n        }\n\n        return;\n      }\n\n      this._bufferedBytes -= data.length;\n      this._deflating = false;\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue() {\n    while (!this._deflating && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[1].length;\n      Reflect.apply(params[0], this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue(params) {\n    this._bufferedBytes += params[1].length;\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.cork();\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n      this._socket.uncork();\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\n\nmodule.exports = Sender;\n"],"mappings":"AAAA;;AAEA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAMC,GAAG,GAAGD,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAM;EAAEE;AAAe,CAAC,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAE5C,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,sBAAsB,CAAC;AACzD,MAAM;EAAEI;AAAa,CAAC,GAAGJ,OAAO,CAAC,aAAa,CAAC;AAC/C,MAAM;EAAEK;AAAkB,CAAC,GAAGL,OAAO,CAAC,cAAc,CAAC;AACrD,MAAM;EAAEM,IAAI,EAAEC,SAAS;EAAEC;AAAS,CAAC,GAAGR,OAAO,CAAC,eAAe,CAAC;AAE9D,MAAMM,IAAI,GAAGG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;;AAE5B;AACA;AACA;AACA,MAAMC,MAAM,CAAC;EACX;AACF;AACA;AACA;AACA;AACA;EACEC,WAAW,CAACC,MAAM,EAAEC,UAAU,EAAE;IAC9B,IAAI,CAACC,WAAW,GAAGD,UAAU,IAAI,CAAC,CAAC;IACnC,IAAI,CAACE,OAAO,GAAGH,MAAM;IAErB,IAAI,CAACI,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,SAAS,GAAG,KAAK;IAEtB,IAAI,CAACC,cAAc,GAAG,CAAC;IACvB,IAAI,CAACC,UAAU,GAAG,KAAK;IACvB,IAAI,CAACC,MAAM,GAAG,EAAE;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAACC,IAAI,EAAEC,OAAO,EAAE;IAC1B,MAAMC,KAAK,GAAGD,OAAO,CAAClB,IAAI,IAAIkB,OAAO,CAACE,QAAQ;IAC9C,IAAIC,MAAM,GAAGH,OAAO,CAAClB,IAAI,GAAG,CAAC,GAAG,CAAC;IACjC,IAAIsB,aAAa,GAAGL,IAAI,CAACM,MAAM;IAE/B,IAAIN,IAAI,CAACM,MAAM,IAAI,KAAK,EAAE;MACxBF,MAAM,IAAI,CAAC;MACXC,aAAa,GAAG,GAAG;IACrB,CAAC,MAAM,IAAIL,IAAI,CAACM,MAAM,GAAG,GAAG,EAAE;MAC5BF,MAAM,IAAI,CAAC;MACXC,aAAa,GAAG,GAAG;IACrB;IAEA,MAAME,MAAM,GAAGrB,MAAM,CAACsB,WAAW,CAACN,KAAK,GAAGF,IAAI,CAACM,MAAM,GAAGF,MAAM,GAAGA,MAAM,CAAC;IAExEG,MAAM,CAAC,CAAC,CAAC,GAAGN,OAAO,CAACQ,GAAG,GAAGR,OAAO,CAACS,MAAM,GAAG,IAAI,GAAGT,OAAO,CAACS,MAAM;IAChE,IAAIT,OAAO,CAACU,IAAI,EAAEJ,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI;IAEnCA,MAAM,CAAC,CAAC,CAAC,GAAGF,aAAa;IAEzB,IAAIA,aAAa,KAAK,GAAG,EAAE;MACzBE,MAAM,CAACK,aAAa,CAACZ,IAAI,CAACM,MAAM,EAAE,CAAC,CAAC;IACtC,CAAC,MAAM,IAAID,aAAa,KAAK,GAAG,EAAE;MAChCE,MAAM,CAACM,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC;MAC1BN,MAAM,CAACM,aAAa,CAACb,IAAI,CAACM,MAAM,EAAE,CAAC,CAAC;IACtC;IAEA,IAAI,CAACL,OAAO,CAAClB,IAAI,EAAE,OAAO,CAACwB,MAAM,EAAEP,IAAI,CAAC;IAExCrB,cAAc,CAACI,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;IAE1BwB,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI;IACjBA,MAAM,CAACH,MAAM,GAAG,CAAC,CAAC,GAAGrB,IAAI,CAAC,CAAC,CAAC;IAC5BwB,MAAM,CAACH,MAAM,GAAG,CAAC,CAAC,GAAGrB,IAAI,CAAC,CAAC,CAAC;IAC5BwB,MAAM,CAACH,MAAM,GAAG,CAAC,CAAC,GAAGrB,IAAI,CAAC,CAAC,CAAC;IAC5BwB,MAAM,CAACH,MAAM,GAAG,CAAC,CAAC,GAAGrB,IAAI,CAAC,CAAC,CAAC;IAE5B,IAAImB,KAAK,EAAE;MACTlB,SAAS,CAACgB,IAAI,EAAEjB,IAAI,EAAEwB,MAAM,EAAEH,MAAM,EAAEJ,IAAI,CAACM,MAAM,CAAC;MAClD,OAAO,CAACC,MAAM,CAAC;IACjB;IAEAvB,SAAS,CAACgB,IAAI,EAAEjB,IAAI,EAAEiB,IAAI,EAAE,CAAC,EAAEA,IAAI,CAACM,MAAM,CAAC;IAC3C,OAAO,CAACC,MAAM,EAAEP,IAAI,CAAC;EACvB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEc,KAAK,CAACC,IAAI,EAAEf,IAAI,EAAEjB,IAAI,EAAEiC,EAAE,EAAE;IAC1B,IAAIC,GAAG;IAEP,IAAIF,IAAI,KAAKG,SAAS,EAAE;MACtBD,GAAG,GAAGpC,YAAY;IACpB,CAAC,MAAM,IAAI,OAAOkC,IAAI,KAAK,QAAQ,IAAI,CAACjC,iBAAiB,CAACiC,IAAI,CAAC,EAAE;MAC/D,MAAM,IAAII,SAAS,CAAC,kDAAkD,CAAC;IACzE,CAAC,MAAM,IAAInB,IAAI,KAAKkB,SAAS,IAAI,CAAClB,IAAI,CAACM,MAAM,EAAE;MAC7CW,GAAG,GAAG/B,MAAM,CAACsB,WAAW,CAAC,CAAC,CAAC;MAC3BS,GAAG,CAACL,aAAa,CAACG,IAAI,EAAE,CAAC,CAAC;IAC5B,CAAC,MAAM;MACL,MAAMT,MAAM,GAAGpB,MAAM,CAACkC,UAAU,CAACpB,IAAI,CAAC;MAEtC,IAAIM,MAAM,GAAG,GAAG,EAAE;QAChB,MAAM,IAAIe,UAAU,CAAC,gDAAgD,CAAC;MACxE;MAEAJ,GAAG,GAAG/B,MAAM,CAACsB,WAAW,CAAC,CAAC,GAAGF,MAAM,CAAC;MACpCW,GAAG,CAACL,aAAa,CAACG,IAAI,EAAE,CAAC,CAAC;MAE1B,IAAI,OAAOf,IAAI,KAAK,QAAQ,EAAE;QAC5BiB,GAAG,CAACK,KAAK,CAACtB,IAAI,EAAE,CAAC,CAAC;MACpB,CAAC,MAAM;QACLiB,GAAG,CAACM,GAAG,CAACvB,IAAI,EAAE,CAAC,CAAC;MAClB;IACF;IAEA,IAAI,IAAI,CAACH,UAAU,EAAE;MACnB,IAAI,CAAC2B,OAAO,CAAC,CAAC,IAAI,CAACC,OAAO,EAAER,GAAG,EAAElC,IAAI,EAAEiC,EAAE,CAAC,CAAC;IAC7C,CAAC,MAAM;MACL,IAAI,CAACS,OAAO,CAACR,GAAG,EAAElC,IAAI,EAAEiC,EAAE,CAAC;IAC7B;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACES,OAAO,CAACzB,IAAI,EAAEjB,IAAI,EAAEiC,EAAE,EAAE;IACtB,IAAI,CAACU,SAAS,CACZtC,MAAM,CAACW,KAAK,CAACC,IAAI,EAAE;MACjBS,GAAG,EAAE,IAAI;MACTE,IAAI,EAAE,KAAK;MACXD,MAAM,EAAE,IAAI;MACZ3B,IAAI;MACJoB,QAAQ,EAAE;IACZ,CAAC,CAAC,EACFa,EAAE,CACH;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEW,IAAI,CAAC3B,IAAI,EAAEjB,IAAI,EAAEiC,EAAE,EAAE;IACnB,MAAMC,GAAG,GAAGhC,QAAQ,CAACe,IAAI,CAAC;IAE1B,IAAIiB,GAAG,CAACX,MAAM,GAAG,GAAG,EAAE;MACpB,MAAM,IAAIe,UAAU,CAAC,kDAAkD,CAAC;IAC1E;IAEA,IAAI,IAAI,CAACxB,UAAU,EAAE;MACnB,IAAI,CAAC2B,OAAO,CAAC,CAAC,IAAI,CAACI,MAAM,EAAEX,GAAG,EAAElC,IAAI,EAAEE,QAAQ,CAACkB,QAAQ,EAAEa,EAAE,CAAC,CAAC;IAC/D,CAAC,MAAM;MACL,IAAI,CAACY,MAAM,CAACX,GAAG,EAAElC,IAAI,EAAEE,QAAQ,CAACkB,QAAQ,EAAEa,EAAE,CAAC;IAC/C;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEY,MAAM,CAAC5B,IAAI,EAAEjB,IAAI,EAAEoB,QAAQ,EAAEa,EAAE,EAAE;IAC/B,IAAI,CAACU,SAAS,CACZtC,MAAM,CAACW,KAAK,CAACC,IAAI,EAAE;MACjBS,GAAG,EAAE,IAAI;MACTE,IAAI,EAAE,KAAK;MACXD,MAAM,EAAE,IAAI;MACZ3B,IAAI;MACJoB;IACF,CAAC,CAAC,EACFa,EAAE,CACH;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEa,IAAI,CAAC7B,IAAI,EAAEjB,IAAI,EAAEiC,EAAE,EAAE;IACnB,MAAMC,GAAG,GAAGhC,QAAQ,CAACe,IAAI,CAAC;IAE1B,IAAIiB,GAAG,CAACX,MAAM,GAAG,GAAG,EAAE;MACpB,MAAM,IAAIe,UAAU,CAAC,kDAAkD,CAAC;IAC1E;IAEA,IAAI,IAAI,CAACxB,UAAU,EAAE;MACnB,IAAI,CAAC2B,OAAO,CAAC,CAAC,IAAI,CAACM,MAAM,EAAEb,GAAG,EAAElC,IAAI,EAAEE,QAAQ,CAACkB,QAAQ,EAAEa,EAAE,CAAC,CAAC;IAC/D,CAAC,MAAM;MACL,IAAI,CAACc,MAAM,CAACb,GAAG,EAAElC,IAAI,EAAEE,QAAQ,CAACkB,QAAQ,EAAEa,EAAE,CAAC;IAC/C;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEc,MAAM,CAAC9B,IAAI,EAAEjB,IAAI,EAAEoB,QAAQ,EAAEa,EAAE,EAAE;IAC/B,IAAI,CAACU,SAAS,CACZtC,MAAM,CAACW,KAAK,CAACC,IAAI,EAAE;MACjBS,GAAG,EAAE,IAAI;MACTE,IAAI,EAAE,KAAK;MACXD,MAAM,EAAE,IAAI;MACZ3B,IAAI;MACJoB;IACF,CAAC,CAAC,EACFa,EAAE,CACH;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEe,IAAI,CAAC/B,IAAI,EAAEC,OAAO,EAAEe,EAAE,EAAE;IACtB,MAAMC,GAAG,GAAGhC,QAAQ,CAACe,IAAI,CAAC;IAC1B,MAAMgC,iBAAiB,GAAG,IAAI,CAACxC,WAAW,CAACZ,iBAAiB,CAACqD,aAAa,CAAC;IAC3E,IAAIvB,MAAM,GAAGT,OAAO,CAACiC,MAAM,GAAG,CAAC,GAAG,CAAC;IACnC,IAAIvB,IAAI,GAAGV,OAAO,CAACkC,QAAQ;IAE3B,IAAI,IAAI,CAACzC,cAAc,EAAE;MACvB,IAAI,CAACA,cAAc,GAAG,KAAK;MAC3B,IACEiB,IAAI,IACJqB,iBAAiB,IACjBA,iBAAiB,CAACI,MAAM,CACtBJ,iBAAiB,CAACK,SAAS,GACvB,4BAA4B,GAC5B,4BAA4B,CACjC,EACD;QACA1B,IAAI,GAAGM,GAAG,CAACX,MAAM,IAAI0B,iBAAiB,CAACM,UAAU;MACnD;MACA,IAAI,CAAC3C,SAAS,GAAGgB,IAAI;IACvB,CAAC,MAAM;MACLA,IAAI,GAAG,KAAK;MACZD,MAAM,GAAG,CAAC;IACZ;IAEA,IAAIT,OAAO,CAACQ,GAAG,EAAE,IAAI,CAACf,cAAc,GAAG,IAAI;IAE3C,IAAIsC,iBAAiB,EAAE;MACrB,MAAMO,IAAI,GAAG;QACX9B,GAAG,EAAER,OAAO,CAACQ,GAAG;QAChBE,IAAI;QACJD,MAAM;QACN3B,IAAI,EAAEkB,OAAO,CAAClB,IAAI;QAClBoB,QAAQ,EAAElB,QAAQ,CAACkB;MACrB,CAAC;MAED,IAAI,IAAI,CAACN,UAAU,EAAE;QACnB,IAAI,CAAC2B,OAAO,CAAC,CAAC,IAAI,CAACgB,QAAQ,EAAEvB,GAAG,EAAE,IAAI,CAACtB,SAAS,EAAE4C,IAAI,EAAEvB,EAAE,CAAC,CAAC;MAC9D,CAAC,MAAM;QACL,IAAI,CAACwB,QAAQ,CAACvB,GAAG,EAAE,IAAI,CAACtB,SAAS,EAAE4C,IAAI,EAAEvB,EAAE,CAAC;MAC9C;IACF,CAAC,MAAM;MACL,IAAI,CAACU,SAAS,CACZtC,MAAM,CAACW,KAAK,CAACkB,GAAG,EAAE;QAChBR,GAAG,EAAER,OAAO,CAACQ,GAAG;QAChBE,IAAI,EAAE,KAAK;QACXD,MAAM;QACN3B,IAAI,EAAEkB,OAAO,CAAClB,IAAI;QAClBoB,QAAQ,EAAElB,QAAQ,CAACkB;MACrB,CAAC,CAAC,EACFa,EAAE,CACH;IACH;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEwB,QAAQ,CAACxC,IAAI,EAAEmC,QAAQ,EAAElC,OAAO,EAAEe,EAAE,EAAE;IACpC,IAAI,CAACmB,QAAQ,EAAE;MACb,IAAI,CAACT,SAAS,CAACtC,MAAM,CAACW,KAAK,CAACC,IAAI,EAAEC,OAAO,CAAC,EAAEe,EAAE,CAAC;MAC/C;IACF;IAEA,MAAMgB,iBAAiB,GAAG,IAAI,CAACxC,WAAW,CAACZ,iBAAiB,CAACqD,aAAa,CAAC;IAE3E,IAAI,CAACrC,cAAc,IAAII,IAAI,CAACM,MAAM;IAClC,IAAI,CAACT,UAAU,GAAG,IAAI;IACtBmC,iBAAiB,CAACG,QAAQ,CAACnC,IAAI,EAAEC,OAAO,CAACQ,GAAG,EAAE,CAACgC,CAAC,EAAExB,GAAG,KAAK;MACxD,IAAI,IAAI,CAACxB,OAAO,CAACiD,SAAS,EAAE;QAC1B,MAAMC,GAAG,GAAG,IAAIC,KAAK,CACnB,uDAAuD,CACxD;QAED,IAAI,OAAO5B,EAAE,KAAK,UAAU,EAAEA,EAAE,CAAC2B,GAAG,CAAC;QAErC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC/C,MAAM,CAACQ,MAAM,EAAEuC,CAAC,EAAE,EAAE;UAC3C,MAAMC,QAAQ,GAAG,IAAI,CAAChD,MAAM,CAAC+C,CAAC,CAAC,CAAC,CAAC,CAAC;UAElC,IAAI,OAAOC,QAAQ,KAAK,UAAU,EAAEA,QAAQ,CAACH,GAAG,CAAC;QACnD;QAEA;MACF;MAEA,IAAI,CAAC/C,cAAc,IAAII,IAAI,CAACM,MAAM;MAClC,IAAI,CAACT,UAAU,GAAG,KAAK;MACvBI,OAAO,CAACE,QAAQ,GAAG,KAAK;MACxB,IAAI,CAACuB,SAAS,CAACtC,MAAM,CAACW,KAAK,CAACkB,GAAG,EAAEhB,OAAO,CAAC,EAAEe,EAAE,CAAC;MAC9C,IAAI,CAAC+B,OAAO,EAAE;IAChB,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACEA,OAAO,GAAG;IACR,OAAO,CAAC,IAAI,CAAClD,UAAU,IAAI,IAAI,CAACC,MAAM,CAACQ,MAAM,EAAE;MAC7C,MAAM8B,MAAM,GAAG,IAAI,CAACtC,MAAM,CAACkD,KAAK,EAAE;MAElC,IAAI,CAACpD,cAAc,IAAIwC,MAAM,CAAC,CAAC,CAAC,CAAC9B,MAAM;MACvC2C,OAAO,CAACC,KAAK,CAACd,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAEA,MAAM,CAACe,KAAK,CAAC,CAAC,CAAC,CAAC;IACjD;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE3B,OAAO,CAACY,MAAM,EAAE;IACd,IAAI,CAACxC,cAAc,IAAIwC,MAAM,CAAC,CAAC,CAAC,CAAC9B,MAAM;IACvC,IAAI,CAACR,MAAM,CAACsD,IAAI,CAAChB,MAAM,CAAC;EAC1B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEV,SAAS,CAAC2B,IAAI,EAAErC,EAAE,EAAE;IAClB,IAAIqC,IAAI,CAAC/C,MAAM,KAAK,CAAC,EAAE;MACrB,IAAI,CAACb,OAAO,CAAC6D,IAAI,EAAE;MACnB,IAAI,CAAC7D,OAAO,CAAC6B,KAAK,CAAC+B,IAAI,CAAC,CAAC,CAAC,CAAC;MAC3B,IAAI,CAAC5D,OAAO,CAAC6B,KAAK,CAAC+B,IAAI,CAAC,CAAC,CAAC,EAAErC,EAAE,CAAC;MAC/B,IAAI,CAACvB,OAAO,CAAC8D,MAAM,EAAE;IACvB,CAAC,MAAM;MACL,IAAI,CAAC9D,OAAO,CAAC6B,KAAK,CAAC+B,IAAI,CAAC,CAAC,CAAC,EAAErC,EAAE,CAAC;IACjC;EACF;AACF;AAEAwC,MAAM,CAACC,OAAO,GAAGrE,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}