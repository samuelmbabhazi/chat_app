{"ast":null,"code":"/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Readable$\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst https = require('https');\nconst http = require('http');\nconst net = require('net');\nconst tls = require('tls');\nconst {\n  randomBytes,\n  createHash\n} = require('crypto');\nconst {\n  Readable\n} = require('stream');\nconst {\n  URL\n} = require('url');\nconst PerMessageDeflate = require('./permessage-deflate');\nconst Receiver = require('./receiver');\nconst Sender = require('./sender');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kForOnEventAttribute,\n  kListener,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = require('./constants');\nconst {\n  EventTarget: {\n    addEventListener,\n    removeEventListener\n  }\n} = require('./event-target');\nconst {\n  format,\n  parse\n} = require('./extension');\nconst {\n  toBuffer\n} = require('./buffer-util');\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\nconst protocolVersions = [8, 13];\nconst closeTimeout = 30 * 1000;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n    this._binaryType = BINARY_TYPES[0];\n    this._closeCode = 1006;\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = EMPTY_BUFFER;\n    this._closeTimer = null;\n    this._extensions = {};\n    this._protocol = '';\n    this._readyState = WebSocket.CONNECTING;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n      if (protocols === undefined) {\n        protocols = [];\n      } else if (!Array.isArray(protocols)) {\n        if (typeof protocols === 'object' && protocols !== null) {\n          options = protocols;\n          protocols = [];\n        } else {\n          protocols = [protocols];\n        }\n      }\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._isServer = true;\n    }\n  }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n    return this._socket._writableState.length + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onclose() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onerror() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onopen() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onmessage() {\n    return null;\n  }\n\n  /**\n   * @type {String}\n   */\n  get protocol() {\n    return this._protocol;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get readyState() {\n    return this._readyState;\n  }\n\n  /**\n   * @type {String}\n   */\n  get url() {\n    return this._url;\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Object} options Options object\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */\n  setSocket(socket, head, options) {\n    const receiver = new Receiver({\n      binaryType: this.binaryType,\n      extensions: this._extensions,\n      isServer: this._isServer,\n      maxPayload: options.maxPayload,\n      skipUTF8Validation: options.skipUTF8Validation\n    });\n    this._sender = new Sender(socket, this._extensions);\n    this._receiver = receiver;\n    this._socket = socket;\n    receiver[kWebSocket] = this;\n    socket[kWebSocket] = this;\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n    socket.setTimeout(0);\n    socket.setNoDelay();\n    if (head.length > 0) socket.unshift(head);\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n    this._readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    if (!this._socket) {\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n    this._receiver.removeAllListeners();\n    this._readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {(String|Buffer)} [data] The reason why the connection is\n   *     closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n    if (this.readyState === WebSocket.CLOSING) {\n      if (this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted)) {\n        this._socket.end();\n      }\n      return;\n    }\n    this._readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, err => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n      this._closeFrameSent = true;\n      if (this._closeFrameReceived || this._receiver._writableState.errorEmitted) {\n        this._socket.end();\n      }\n    });\n\n    //\n    // Specify a timeout for the closing handshake to complete.\n    //\n    this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), closeTimeout);\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n    if (typeof data === 'number') data = data.toString();\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n    if (typeof data === 'number') data = data.toString();\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n    if (typeof data === 'number') data = data.toString();\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n    if (this._socket) {\n      this._readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n['binaryType', 'bufferedAmount', 'extensions', 'protocol', 'readyState', 'url'].forEach(property => {\n  Object.defineProperty(WebSocket.prototype, property, {\n    enumerable: true\n  });\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach(method => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    enumerable: true,\n    get() {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) return listener[kListener];\n      }\n      return null;\n    },\n    set(handler) {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) {\n          this.removeListener(method, listener);\n          break;\n        }\n      }\n      if (typeof handler !== 'function') return;\n      this.addEventListener(method, handler, {\n        [kForOnEventAttribute]: true\n      });\n    }\n  });\n});\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {Array} protocols The subprotocols\n * @param {Object} [options] Connection options\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n *     not to skip UTF-8 validation for text and close messages\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    skipUTF8Validation: false,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    createConnection: undefined,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: undefined,\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(`Unsupported protocol version: ${opts.protocolVersion} ` + `(supported versions: ${protocolVersions.join(', ')})`);\n  }\n  let parsedUrl;\n  if (address instanceof URL) {\n    parsedUrl = address;\n    websocket._url = address.href;\n  } else {\n    try {\n      parsedUrl = new URL(address);\n    } catch (e) {\n      throw new SyntaxError(`Invalid URL: ${address}`);\n    }\n    websocket._url = address;\n  }\n  const isSecure = parsedUrl.protocol === 'wss:';\n  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isUnixSocket) {\n    throw new SyntaxError('The URL\\'s protocol must be one of \"ws:\", \"wss:\", or \"ws+unix:\"');\n  }\n  if (isUnixSocket && !parsedUrl.pathname) {\n    throw new SyntaxError(\"The URL's pathname is empty\");\n  }\n  if (parsedUrl.hash) {\n    throw new SyntaxError('The URL contains a fragment identifier');\n  }\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const get = isSecure ? https.get : http.get;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[') ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;\n  opts.headers = {\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket',\n    ...opts.headers\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(opts.perMessageDeflate !== true ? opts.perMessageDeflate : {}, false, opts.maxPayload);\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols.length) {\n    for (const protocol of protocols) {\n      if (typeof protocol !== 'string' || !subprotocolRegex.test(protocol) || protocolSet.has(protocol)) {\n        throw new SyntaxError('An invalid or duplicated subprotocol was specified');\n      }\n      protocolSet.add(protocol);\n    }\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n  if (isUnixSocket) {\n    const parts = opts.path.split(':');\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n  let req = websocket._req = get(opts);\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n  req.on('error', err => {\n    if (req === null || req.aborted) return;\n    req = websocket._req = null;\n    websocket._readyState = WebSocket.CLOSING;\n    websocket.emit('error', err);\n    websocket.emitClose();\n  });\n  req.on('response', res => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n    if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n      req.abort();\n      const addr = new URL(location, address);\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(websocket, req, `Unexpected server response: ${res.statusCode}`);\n    }\n  });\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the `upgrade`\n    // event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n    req = websocket._req = null;\n    const digest = createHash('sha1').update(key + GUID).digest('base64');\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n    const serverProt = res.headers['sec-websocket-protocol'];\n    let protError;\n    if (serverProt !== undefined) {\n      if (!protocolSet.size) {\n        protError = 'Server sent a subprotocol but none was requested';\n      } else if (!protocolSet.has(serverProt)) {\n        protError = 'Server sent an invalid subprotocol';\n      }\n    } else if (protocolSet.size) {\n      protError = 'Server sent no subprotocol';\n    }\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n    if (serverProt) websocket._protocol = serverProt;\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n    if (secWebSocketExtensions !== undefined) {\n      if (!perMessageDeflate) {\n        const message = 'Server sent a Sec-WebSocket-Extensions header but no extension ' + 'was requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n      let extensions;\n      try {\n        extensions = parse(secWebSocketExtensions);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n      const extensionNames = Object.keys(extensions);\n      if (extensionNames.length !== 1 || extensionNames[0] !== PerMessageDeflate.extensionName) {\n        const message = 'Server indicated an extension that was not requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n      try {\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n      websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n    }\n    websocket.setSocket(socket, head, {\n      maxPayload: opts.maxPayload,\n      skipUTF8Validation: opts.skipUTF8Validation\n    });\n  });\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n  if (!options.servername && options.servername !== '') {\n    options.servername = net.isIP(options.host) ? '' : options.host;\n  }\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket._readyState = WebSocket.CLOSING;\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n  if (stream.setHeader) {\n    stream.abort();\n    if (stream.socket && !stream.socket.destroyed) {\n      //\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n      // called after the request completed. See\n      // https://github.com/websockets/ws/issues/1869.\n      //\n      stream.socket.destroy();\n    }\n    stream.once('abort', websocket.emitClose.bind(websocket));\n    websocket.emit('error', err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = toBuffer(data).length;\n\n    //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n    if (websocket._socket) websocket._sender._bufferedBytes += length;else websocket._bufferedAmount += length;\n  }\n  if (cb) {\n    const err = new Error(`WebSocket is not open: readyState ${websocket.readyState} ` + `(${readyStates[websocket.readyState]})`);\n    cb(err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {Buffer} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n  if (websocket._socket[kWebSocket] === undefined) return;\n  websocket._socket.removeListener('data', socketOnData);\n  process.nextTick(resume, websocket._socket);\n  if (code === 1005) websocket.close();else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  this[kWebSocket]._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n  if (websocket._socket[kWebSocket] !== undefined) {\n    websocket._socket.removeListener('data', socketOnData);\n\n    //\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n    // https://github.com/websockets/ws/issues/1940.\n    //\n    process.nextTick(resume, websocket._socket);\n    websocket.close(err[kStatusCode]);\n  }\n  websocket.emit('error', err);\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n * @param {Boolean} isBinary Specifies whether the message is binary or not\n * @private\n */\nfunction receiverOnMessage(data, isBinary) {\n  this[kWebSocket].emit('message', data, isBinary);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n  websocket.pong(data, !websocket._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */\nfunction resume(stream) {\n  stream.resume();\n}\n\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n  this.removeListener('close', socketOnClose);\n  this.removeListener('data', socketOnData);\n  this.removeListener('end', socketOnEnd);\n  websocket._readyState = WebSocket.CLOSING;\n  let chunk;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk.\n  //\n  if (!this._readableState.endEmitted && !websocket._closeFrameReceived && !websocket._receiver._writableState.errorEmitted && (chunk = websocket._socket.read()) !== null) {\n    websocket._receiver.write(chunk);\n  }\n  websocket._receiver.end();\n  this[kWebSocket] = undefined;\n  clearTimeout(websocket._closeTimer);\n  if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n  websocket._readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n  if (websocket) {\n    websocket._readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}","map":{"version":3,"names":["EventEmitter","require","https","http","net","tls","randomBytes","createHash","Readable","URL","PerMessageDeflate","Receiver","Sender","BINARY_TYPES","EMPTY_BUFFER","GUID","kForOnEventAttribute","kListener","kStatusCode","kWebSocket","NOOP","EventTarget","addEventListener","removeEventListener","format","parse","toBuffer","readyStates","subprotocolRegex","protocolVersions","closeTimeout","WebSocket","constructor","address","protocols","options","_binaryType","_closeCode","_closeFrameReceived","_closeFrameSent","_closeMessage","_closeTimer","_extensions","_protocol","_readyState","CONNECTING","_receiver","_sender","_socket","_bufferedAmount","_isServer","_redirects","undefined","Array","isArray","initAsClient","binaryType","type","includes","bufferedAmount","_writableState","length","_bufferedBytes","extensions","Object","keys","join","onclose","onerror","onopen","onmessage","protocol","readyState","url","_url","setSocket","socket","head","receiver","isServer","maxPayload","skipUTF8Validation","on","receiverOnConclude","receiverOnDrain","receiverOnError","receiverOnMessage","receiverOnPing","receiverOnPong","setTimeout","setNoDelay","unshift","socketOnClose","socketOnData","socketOnEnd","socketOnError","OPEN","emit","emitClose","CLOSED","extensionName","cleanup","removeAllListeners","close","code","data","msg","abortHandshake","_req","CLOSING","errorEmitted","end","err","destroy","bind","ping","mask","cb","Error","toString","sendAfterClose","pong","send","opts","binary","compress","fin","terminate","defineProperty","enumerable","value","indexOf","prototype","forEach","property","method","get","listener","listeners","set","handler","removeListener","module","exports","websocket","protocolVersion","perMessageDeflate","followRedirects","maxRedirects","createConnection","socketPath","hostname","timeout","host","path","port","RangeError","parsedUrl","href","e","SyntaxError","isSecure","isUnixSocket","pathname","hash","defaultPort","key","protocolSet","Set","tlsConnect","netConnect","startsWith","slice","headers","Connection","Upgrade","search","handshakeTimeout","offer","test","has","add","origin","Origin","username","password","auth","parts","split","req","aborted","res","location","statusCode","abort","addr","digest","update","serverProt","protError","size","secWebSocketExtensions","message","extensionNames","accept","connect","servername","isIP","stream","captureStackTrace","setHeader","destroyed","once","reason","process","nextTick","resume","receiverOnFinish","isBinary","chunk","_readableState","endEmitted","read","write","clearTimeout","finished","pause"],"sources":["/home/samuel/Documents/chatApp/node_modules/ws/lib/websocket.js"],"sourcesContent":["/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Readable$\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst https = require('https');\nconst http = require('http');\nconst net = require('net');\nconst tls = require('tls');\nconst { randomBytes, createHash } = require('crypto');\nconst { Readable } = require('stream');\nconst { URL } = require('url');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst Receiver = require('./receiver');\nconst Sender = require('./sender');\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kForOnEventAttribute,\n  kListener,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = require('./constants');\nconst {\n  EventTarget: { addEventListener, removeEventListener }\n} = require('./event-target');\nconst { format, parse } = require('./extension');\nconst { toBuffer } = require('./buffer-util');\n\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\nconst protocolVersions = [8, 13];\nconst closeTimeout = 30 * 1000;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this._binaryType = BINARY_TYPES[0];\n    this._closeCode = 1006;\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = EMPTY_BUFFER;\n    this._closeTimer = null;\n    this._extensions = {};\n    this._protocol = '';\n    this._readyState = WebSocket.CONNECTING;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (protocols === undefined) {\n        protocols = [];\n      } else if (!Array.isArray(protocols)) {\n        if (typeof protocols === 'object' && protocols !== null) {\n          options = protocols;\n          protocols = [];\n        } else {\n          protocols = [protocols];\n        }\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._isServer = true;\n    }\n  }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n\n    return this._socket._writableState.length + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onclose() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onerror() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onopen() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onmessage() {\n    return null;\n  }\n\n  /**\n   * @type {String}\n   */\n  get protocol() {\n    return this._protocol;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get readyState() {\n    return this._readyState;\n  }\n\n  /**\n   * @type {String}\n   */\n  get url() {\n    return this._url;\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Object} options Options object\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */\n  setSocket(socket, head, options) {\n    const receiver = new Receiver({\n      binaryType: this.binaryType,\n      extensions: this._extensions,\n      isServer: this._isServer,\n      maxPayload: options.maxPayload,\n      skipUTF8Validation: options.skipUTF8Validation\n    });\n\n    this._sender = new Sender(socket, this._extensions);\n    this._receiver = receiver;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    socket.setTimeout(0);\n    socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this._readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    if (!this._socket) {\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this._readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {(String|Buffer)} [data] The reason why the connection is\n   *     closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (\n        this._closeFrameSent &&\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\n      ) {\n        this._socket.end();\n      }\n\n      return;\n    }\n\n    this._readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (\n        this._closeFrameReceived ||\n        this._receiver._writableState.errorEmitted\n      ) {\n        this._socket.end();\n      }\n    });\n\n    //\n    // Specify a timeout for the closing handshake to complete.\n    //\n    this._closeTimer = setTimeout(\n      this._socket.destroy.bind(this._socket),\n      closeTimeout\n    );\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this._socket) {\n      this._readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n[\n  'binaryType',\n  'bufferedAmount',\n  'extensions',\n  'protocol',\n  'readyState',\n  'url'\n].forEach((property) => {\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    enumerable: true,\n    get() {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) return listener[kListener];\n      }\n\n      return null;\n    },\n    set(handler) {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) {\n          this.removeListener(method, listener);\n          break;\n        }\n      }\n\n      if (typeof handler !== 'function') return;\n\n      this.addEventListener(method, handler, {\n        [kForOnEventAttribute]: true\n      });\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {Array} protocols The subprotocols\n * @param {Object} [options] Connection options\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n *     not to skip UTF-8 validation for text and close messages\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    skipUTF8Validation: false,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    createConnection: undefined,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: undefined,\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  let parsedUrl;\n\n  if (address instanceof URL) {\n    parsedUrl = address;\n    websocket._url = address.href;\n  } else {\n    try {\n      parsedUrl = new URL(address);\n    } catch (e) {\n      throw new SyntaxError(`Invalid URL: ${address}`);\n    }\n\n    websocket._url = address;\n  }\n\n  const isSecure = parsedUrl.protocol === 'wss:';\n  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';\n\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isUnixSocket) {\n    throw new SyntaxError(\n      'The URL\\'s protocol must be one of \"ws:\", \"wss:\", or \"ws+unix:\"'\n    );\n  }\n\n  if (isUnixSocket && !parsedUrl.pathname) {\n    throw new SyntaxError(\"The URL's pathname is empty\");\n  }\n\n  if (parsedUrl.hash) {\n    throw new SyntaxError('The URL contains a fragment identifier');\n  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const get = isSecure ? https.get : http.get;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket',\n    ...opts.headers\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\n      false,\n      opts.maxPayload\n    );\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols.length) {\n    for (const protocol of protocols) {\n      if (\n        typeof protocol !== 'string' ||\n        !subprotocolRegex.test(protocol) ||\n        protocolSet.has(protocol)\n      ) {\n        throw new SyntaxError(\n          'An invalid or duplicated subprotocol was specified'\n        );\n      }\n\n      protocolSet.add(protocol);\n    }\n\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isUnixSocket) {\n    const parts = opts.path.split(':');\n\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  let req = (websocket._req = get(opts));\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', (err) => {\n    if (req === null || req.aborted) return;\n\n    req = websocket._req = null;\n    websocket._readyState = WebSocket.CLOSING;\n    websocket.emit('error', err);\n    websocket.emitClose();\n  });\n\n  req.on('response', (res) => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (\n      location &&\n      opts.followRedirects &&\n      statusCode >= 300 &&\n      statusCode < 400\n    ) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n\n      const addr = new URL(location, address);\n\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(\n        websocket,\n        req,\n        `Unexpected server response: ${res.statusCode}`\n      );\n    }\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the `upgrade`\n    // event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n\n    req = websocket._req = null;\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    let protError;\n\n    if (serverProt !== undefined) {\n      if (!protocolSet.size) {\n        protError = 'Server sent a subprotocol but none was requested';\n      } else if (!protocolSet.has(serverProt)) {\n        protError = 'Server sent an invalid subprotocol';\n      }\n    } else if (protocolSet.size) {\n      protError = 'Server sent no subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket._protocol = serverProt;\n\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n\n    if (secWebSocketExtensions !== undefined) {\n      if (!perMessageDeflate) {\n        const message =\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\n          'was requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      let extensions;\n\n      try {\n        extensions = parse(secWebSocketExtensions);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      const extensionNames = Object.keys(extensions);\n\n      if (\n        extensionNames.length !== 1 ||\n        extensionNames[0] !== PerMessageDeflate.extensionName\n      ) {\n        const message = 'Server indicated an extension that was not requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      try {\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      websocket._extensions[PerMessageDeflate.extensionName] =\n        perMessageDeflate;\n    }\n\n    websocket.setSocket(socket, head, {\n      maxPayload: opts.maxPayload,\n      skipUTF8Validation: opts.skipUTF8Validation\n    });\n  });\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n\n  if (!options.servername && options.servername !== '') {\n    options.servername = net.isIP(options.host) ? '' : options.host;\n  }\n\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket._readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream.abort();\n\n    if (stream.socket && !stream.socket.destroyed) {\n      //\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n      // called after the request completed. See\n      // https://github.com/websockets/ws/issues/1869.\n      //\n      stream.socket.destroy();\n    }\n\n    stream.once('abort', websocket.emitClose.bind(websocket));\n    websocket.emit('error', err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = toBuffer(data).length;\n\n    //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\n    else websocket._bufferedAmount += length;\n  }\n\n  if (cb) {\n    const err = new Error(\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\n        `(${readyStates[websocket.readyState]})`\n    );\n    cb(err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {Buffer} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (websocket._socket[kWebSocket] === undefined) return;\n\n  websocket._socket.removeListener('data', socketOnData);\n  process.nextTick(resume, websocket._socket);\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  this[kWebSocket]._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._socket[kWebSocket] !== undefined) {\n    websocket._socket.removeListener('data', socketOnData);\n\n    //\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n    // https://github.com/websockets/ws/issues/1940.\n    //\n    process.nextTick(resume, websocket._socket);\n\n    websocket.close(err[kStatusCode]);\n  }\n\n  websocket.emit('error', err);\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n * @param {Boolean} isBinary Specifies whether the message is binary or not\n * @private\n */\nfunction receiverOnMessage(data, isBinary) {\n  this[kWebSocket].emit('message', data, isBinary);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  websocket.pong(data, !websocket._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */\nfunction resume(stream) {\n  stream.resume();\n}\n\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('data', socketOnData);\n  this.removeListener('end', socketOnEnd);\n\n  websocket._readyState = WebSocket.CLOSING;\n\n  let chunk;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk.\n  //\n  if (\n    !this._readableState.endEmitted &&\n    !websocket._closeFrameReceived &&\n    !websocket._receiver._writableState.errorEmitted &&\n    (chunk = websocket._socket.read()) !== null\n  ) {\n    websocket._receiver.write(chunk);\n  }\n\n  websocket._receiver.end();\n\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket._readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  if (websocket) {\n    websocket._readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}